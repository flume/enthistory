// Code generated by enthistory, DO NOT EDIT.
package {{ .SchemaPkg }}

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/field"
	{{- if $.WithHistoryTimeIndex }}
	"entgo.io/ent/schema/index"
	{{- end }}

	"github.com/flume/enthistory"

	"time"
)
{{- $schema := .Schema }}
{{- $name := $schema.Name }}
{{- $fields := $schema.Fields }}

// {{ $name }} holds the schema definition for the {{ $name }} entity.
type {{ $name }} struct {
	ent.Schema
}

// Annotations of the {{ $name }}.
func ({{ $name }}) Annotations() []schema.Annotation {
	return []schema.Annotation{
		entsql.Annotation{
			Table: "{{ .TableName }}",
		},
        enthistory.Annotations{
            IsHistory: true,
            Exclude: true,
        },
	}
}

// Fields of the {{ $name }}.
func ({{ $name }}) Fields() []ent.Field {
	historyFields := []ent.Field{
        field.Time("history_time").
            Default(time.Now).
            Immutable(),
        field.{{ .IdType }}("ref").
            Immutable().
            Optional(),
        field.Enum("operation").
            GoType(enthistory.OpType("")).
            Immutable(),
        {{- if $.WithUpdatedBy }}
        field.{{ $.UpdatedByValueType }}("updated_by").
            Optional().
            Immutable().
            Nillable(),
        {{- end }}
    }


    original := {{ .OriginalTableName }}{}
    for _, field := range original.Fields() {
        if field.Descriptor().Name != "id" {
            historyFields = append(historyFields, field)
        }
    }

    return historyFields
}

// Mixin of the {{ $name }}.
func ({{ $name }}) Mixin() []ent.Mixin {
	return {{ .OriginalTableName }}{}.Mixin()
}

{{- if $.WithHistoryTimeIndex }}
func ({{ $name }}) Indexes() []ent.Index {
	return []ent.Index{
        index.Fields("history_time"),
	}
}
{{- end }}
