{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "client/init" }}
// Client is the client that holds all ent builders.
type Client struct {
	config
	{{- if $.SupportMigrate }}
		// Schema is the client for creating, migrating and dropping schema.
		Schema *migrate.Schema
	{{- end }}
	{{- range $n := $.Nodes }}
		// {{ $n.Name }} is the client for interacting with the {{ $n.Name }} builders.
		{{ $n.Name }} *{{ $n.ClientName }}
	{{- end }}
	{{- template "client/fields/additional" $ }}
	{{- with $tmpls := matchTemplate "client/fields/additional/*" }}
		{{- range $tmpl := $tmpls }}
			{{- xtemplate $tmpl $ }}
		{{- end }}
	{{- end }}
	// historyActivated determines if the history hooks have already been activated
	historyActivated bool
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	{{- if $.SupportMigrate }}
		c.Schema = migrate.NewSchema(c.driver)
	{{- end }}
	{{- range $n := $.Nodes }}
    	c.{{ $n.Name }} = New{{ $n.ClientName }}(c.config)
	{{- end }}
}

// withHistory adds the history hooks to the appropriate schemas - generated by enthistory
func (c *Client) WithHistory() {
    if !c.historyActivated {
	{{- range $n := $.Nodes }}
	    {{- $name := $n.Name }}
	    {{- $history := hasSuffix $name "History" }}
	    {{- if $history }}
	    {{- else }}
            {{- range $h := $.Nodes }}
                {{- $sameNodeType := hasPrefix $h.Name (printf "%sHistory" $name) }}
                {{- if $sameNodeType }}
					{{ calculateHooks $n $h }}
                {{- end }}
            {{- end }}
        {{- end }}
	{{- end }}
	    c.historyActivated = true
	}
}

{{ end }}
