{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "historyFromMutation" }}
// Code generated by enthistory, DO NOT EDIT.
	{{/* Add the base header for the generated file */}}
	{{ $pkg := base $.Config.Package }}
	{{ template "header" $ }}
    var (
        idNotFoundError = errors.New("could not get id from mutation")
    )
    func EntOpToHistoryOp(op ent.Op) enthistory.OpType {
    	switch op {
    	case ent.OpDelete, ent.OpDeleteOne:
    		return enthistory.OpTypeDelete
    	case ent.OpUpdate, ent.OpUpdateOne:
    		return enthistory.OpTypeUpdate
    	default:
    		return enthistory.OpTypeInsert
    	}
    }

    func rollback(tx *Tx, err error) error {
    	if tx != nil {
    		if rerr := tx.Rollback(); rerr != nil {
    			err = fmt.Errorf("%w: %v", err, rerr)
    		}
    		return err
    	}
    	return err
    }
	{{ range $n := $.Nodes }}
	    {{ $name := $n.Name }}
	    {{ $history := hasSuffix $name "History" }}
	    {{ if $history }}
	    {{ else }}
		    {{ $mutator := $n.MutationName }}
            {{ range $h := $.Nodes }}
                {{ $sameNodeType := hasPrefix $h.Name (printf "%sHistory" $name) }}
                {{ if $sameNodeType }}
                    func (m *{{ $mutator }}) CreateHistoryFromCreate(ctx context.Context) error {
                        client := m.Client()
                        tx, err := m.Tx()
                        if err != nil {
                            tx = nil
                        }

                       {{ if not (eq $.Annotations.UpdatedByKey "") }}
                       updatedBy, _ := ctx.Value("{{ $.Annotations.UpdatedByKey }}").(string)
                       {{ end }}

                        id, ok := m.ID()
                        if !ok {
                            return rollback(tx, idNotFoundError)
                        }

                        create := client.{{$h.Name}}.Create()
                        if tx != nil {
                            create = tx.{{$h.Name}}.Create()
                        }
                        create = create.
                            SetOperation(EntOpToHistoryOp(m.Op())).
                            SetHistoryTime(time.Now()).
                        {{ if not (eq $.Annotations.UpdatedByKey "") }}
                            SetRef(id).
                            SetUpdatedBy(updatedBy)
                        {{ else }}
                            SetRef(id)
                        {{ end }}

                        {{ range $f := $n.Fields }}
                            if {{ camel $f.Name }}, exists := m.{{ $f.StructField }}(); exists {
                                create = create.Set{{ if $f.Nillable }}Nillable{{ end }}{{ $f.StructField }}({{ if $f.Nillable }}&{{ end }}{{ camel $f.Name }})
                            }
                        {{ end }}
                        _, err = create.Save(ctx)
                        if err != nil {
                            rollback(tx, err)
                        }
                        return nil
                    }

                    func (m *{{ $mutator }}) CreateHistoryFromUpdate(ctx context.Context) error {
                        client := m.Client()
                        tx, err := m.Tx()
                        if err != nil {
                            tx = nil
                        }

                        {{ if not (eq $.Annotations.UpdatedByKey "") }}
                        updatedBy, _ := ctx.Value("{{ $.Annotations.UpdatedByKey }}").(string)
                        {{ end }}
                        id, ok := m.ID()
                        if !ok {
                            return rollback(tx, idNotFoundError)
                        }

                        {{ camel $name }}, err := client.{{ $name }}.Get(ctx, id)
                        if err != nil {
                            return rollback(tx, err)
                        }

                        create := client.{{$h.Name}}.Create()
                        if tx != nil {
                            create = tx.{{$h.Name}}.Create()
                        }
                        create = create.
                            SetOperation(EntOpToHistoryOp(m.Op())).
                            SetHistoryTime(time.Now()).
                        {{ if not (eq $.Annotations.UpdatedByKey "") }}
                            SetRef(id).
                            SetUpdatedBy(updatedBy)
                        {{ else }}
                            SetRef(id)
                        {{ end }}

                    {{ range $f := $n.Fields }}
                        if {{ camel $f.Name }}, exists := m.{{ $f.StructField }}(); exists {
                            create = create.Set{{ if $f.Nillable }}Nillable{{ end }}{{ $f.StructField }}({{ if $f.Nillable }}&{{ end }}{{ camel $f.Name }})
                        } else {
                            create = create.Set{{ if $f.Nillable }}Nillable{{ end }}{{ $f.StructField }}({{ camel $name }}.{{ pascal $f.Name }})
                        }
                    {{ end }}
                        _, err = create.Save(ctx)
                        if err != nil {
                            rollback(tx, err)
                        }
                        return nil
                    }

                    func (m *{{ $mutator }}) CreateHistoryFromDelete(ctx context.Context) error {
                        client := m.Client()
                        tx, err := m.Tx()
                        if err != nil {
                            tx = nil
                        }

                       {{ if not (eq $.Annotations.UpdatedByKey "") }}
                       updatedBy, _ := ctx.Value("{{ $.Annotations.UpdatedByKey }}").(string)
                       {{ end }}

                        id, ok := m.ID()
                        if !ok {
                            return rollback(tx, idNotFoundError)
                        }

                        {{ camel $name }}, err := client.{{ $name }}.Get(ctx, id)
                        if err != nil {
                            return rollback(tx, err)
                        }

                        create := client.{{$h.Name}}.Create()
                        if tx != nil {
                            create = tx.{{$h.Name}}.Create()
                        }
                        _, err = create.
                            SetOperation(EntOpToHistoryOp(m.Op())).
                            SetHistoryTime(time.Now()).
                            SetRef(id).
                        {{ if not (eq $.Annotations.UpdatedByKey "") }}
                            SetUpdatedBy(updatedBy).
                        {{ end }}
                        {{ range $f := $n.Fields }}
                            Set{{ if $f.Nillable }}Nillable{{ end }}{{ $f.StructField }}({{ camel $name }}.{{ pascal $f.Name }}).
                        {{ end }}
                            Save(ctx)
                        if err != nil {
                            rollback(tx, err)
                        }
                        return nil
                    }
                {{ end }}
            {{ end }}
        {{ end }}
	{{ end }}
{{ end }}
