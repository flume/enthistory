// Code generated by ent, DO NOT EDIT.

package friendship

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the friendship type in the database.
	Label = "friendship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCharacterID holds the string denoting the character_id field in the database.
	FieldCharacterID = "character_id"
	// FieldFriendID holds the string denoting the friend_id field in the database.
	FieldFriendID = "friend_id"
	// EdgeCharacter holds the string denoting the character edge name in mutations.
	EdgeCharacter = "character"
	// EdgeFriend holds the string denoting the friend edge name in mutations.
	EdgeFriend = "friend"
	// Table holds the table name of the friendship in the database.
	Table = "friendship"
	// CharacterTable is the table that holds the character relation/edge.
	CharacterTable = "friendship"
	// CharacterInverseTable is the table name for the Character entity.
	// It exists in this package in order to avoid circular dependency with the "character" package.
	CharacterInverseTable = "character"
	// CharacterColumn is the table column denoting the character relation/edge.
	CharacterColumn = "character_id"
	// FriendTable is the table that holds the friend relation/edge.
	FriendTable = "friendship"
	// FriendInverseTable is the table name for the Character entity.
	// It exists in this package in order to avoid circular dependency with the "character" package.
	FriendInverseTable = "character"
	// FriendColumn is the table column denoting the friend relation/edge.
	FriendColumn = "friend_id"
)

// Columns holds all SQL columns for friendship fields.
var Columns = []string{
	FieldID,
	FieldCharacterID,
	FieldFriendID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Friendship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCharacterID orders the results by the character_id field.
func ByCharacterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCharacterID, opts...).ToFunc()
}

// ByFriendID orders the results by the friend_id field.
func ByFriendID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFriendID, opts...).ToFunc()
}

// ByCharacterField orders the results by character field.
func ByCharacterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCharacterStep(), sql.OrderByField(field, opts...))
	}
}

// ByFriendField orders the results by friend field.
func ByFriendField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendStep(), sql.OrderByField(field, opts...))
	}
}
func newCharacterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CharacterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CharacterTable, CharacterColumn),
	)
}
func newFriendStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FriendTable, FriendColumn),
	)
}
