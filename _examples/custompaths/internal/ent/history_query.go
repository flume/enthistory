// Code generated by enthistory, DO NOT EDIT.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"_examples/custompaths/internal/ent/characterhistory"
	"_examples/custompaths/internal/ent/friendshiphistory"

	"entgo.io/ent/dialect/sql"
)

func (_m *Character) History() *CharacterHistoryQuery {
	historyClient := NewCharacterHistoryClient(_m.config)
	return historyClient.Query().Where(characterhistory.Ref(_m.ID))
}

func (_m *CharacterHistory) Next(ctx context.Context) (*CharacterHistory, error) {
	client := NewCharacterHistoryClient(_m.config)
	return client.Query().
		Where(
			characterhistory.Ref(_m.Ref),
			characterhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(characterhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *CharacterHistory) Prev(ctx context.Context) (*CharacterHistory, error) {
	client := NewCharacterHistoryClient(_m.config)
	return client.Query().
		Where(
			characterhistory.Ref(_m.Ref),
			characterhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(characterhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (chq *CharacterHistoryQuery) Earliest(ctx context.Context) (*CharacterHistory, error) {
	return chq.
		Order(characterhistory.ByHistoryTime()).
		First(ctx)
}

func (chq *CharacterHistoryQuery) Latest(ctx context.Context) (*CharacterHistory, error) {
	return chq.
		Order(characterhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (chq *CharacterHistoryQuery) AsOf(ctx context.Context, time time.Time) (*CharacterHistory, error) {
	return chq.
		Where(characterhistory.HistoryTimeLTE(time)).
		Order(characterhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *CharacterHistory) Restore(ctx context.Context) (*Character, error) {
	client := NewCharacterClient(_m.config)
	return client.
		UpdateOneID(_m.Ref).
		SetAge(_m.Age).
		SetName(_m.Name).
		Save(ctx)
}

func (_m *Friendship) History() *FriendshipHistoryQuery {
	historyClient := NewFriendshipHistoryClient(_m.config)
	return historyClient.Query().Where(friendshiphistory.Ref(_m.ID))
}

func (_m *FriendshipHistory) Next(ctx context.Context) (*FriendshipHistory, error) {
	client := NewFriendshipHistoryClient(_m.config)
	return client.Query().
		Where(
			friendshiphistory.Ref(_m.Ref),
			friendshiphistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(friendshiphistory.ByHistoryTime()).
		First(ctx)
}

func (_m *FriendshipHistory) Prev(ctx context.Context) (*FriendshipHistory, error) {
	client := NewFriendshipHistoryClient(_m.config)
	return client.Query().
		Where(
			friendshiphistory.Ref(_m.Ref),
			friendshiphistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(friendshiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (fhq *FriendshipHistoryQuery) Earliest(ctx context.Context) (*FriendshipHistory, error) {
	return fhq.
		Order(friendshiphistory.ByHistoryTime()).
		First(ctx)
}

func (fhq *FriendshipHistoryQuery) Latest(ctx context.Context) (*FriendshipHistory, error) {
	return fhq.
		Order(friendshiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (fhq *FriendshipHistoryQuery) AsOf(ctx context.Context, time time.Time) (*FriendshipHistory, error) {
	return fhq.
		Where(friendshiphistory.HistoryTimeLTE(time)).
		Order(friendshiphistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *FriendshipHistory) Restore(ctx context.Context) (*Friendship, error) {
	client := NewFriendshipClient(_m.config)
	return client.
		UpdateOneID(_m.Ref).
		SetCharacterID(_m.CharacterID).
		SetFriendID(_m.FriendID).
		Save(ctx)
}
