// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/basic/ent/residence"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Residence is the model entity for the Residence schema.
type Residence struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResidenceQuery when eager-loading is set.
	Edges        ResidenceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResidenceEdges holds the relations/edges for other nodes in the graph.
type ResidenceEdges struct {
	// Occupants holds the value of the occupants edge.
	Occupants []*Character `json:"occupants,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OccupantsOrErr returns the Occupants value or an error if the edge
// was not loaded in eager-loading.
func (e ResidenceEdges) OccupantsOrErr() ([]*Character, error) {
	if e.loadedTypes[0] {
		return e.Occupants, nil
	}
	return nil, &NotLoadedError{edge: "occupants"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Residence) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case residence.FieldName:
			values[i] = new(sql.NullString)
		case residence.FieldCreatedAt, residence.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case residence.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Residence fields.
func (r *Residence) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case residence.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case residence.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case residence.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case residence.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Residence.
// This includes values selected through modifiers, order, etc.
func (r *Residence) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryOccupants queries the "occupants" edge of the Residence entity.
func (r *Residence) QueryOccupants() *CharacterQuery {
	return NewResidenceClient(r.config).QueryOccupants(r)
}

// Update returns a builder for updating this Residence.
// Note that you need to call Residence.Unwrap() before calling this method if this Residence
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Residence) Update() *ResidenceUpdateOne {
	return NewResidenceClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Residence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Residence) Unwrap() *Residence {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Residence is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Residence) String() string {
	var builder strings.Builder
	builder.WriteString("Residence(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Residences is a parsable slice of Residence.
type Residences []*Residence
