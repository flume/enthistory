// Code generated by enthistory, DO NOT EDIT.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"_examples/updateby_uuid/ent/organizationhistory"
	"_examples/updateby_uuid/ent/storehistory"

	"entgo.io/ent/dialect/sql"
)

func (o *Organization) History() *OrganizationHistoryQuery {
	historyClient := NewOrganizationHistoryClient(o.config)
	return historyClient.Query().Where(organizationhistory.Ref(o.ID))
}

func (oh *OrganizationHistory) Next(ctx context.Context) (*OrganizationHistory, error) {
	client := NewOrganizationHistoryClient(oh.config)
	return client.Query().
		Where(
			organizationhistory.Ref(oh.Ref),
			organizationhistory.HistoryTimeGT(oh.HistoryTime),
		).
		Order(organizationhistory.ByHistoryTime()).
		First(ctx)
}

func (oh *OrganizationHistory) Prev(ctx context.Context) (*OrganizationHistory, error) {
	client := NewOrganizationHistoryClient(oh.config)
	return client.Query().
		Where(
			organizationhistory.Ref(oh.Ref),
			organizationhistory.HistoryTimeLT(oh.HistoryTime),
		).
		Order(organizationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ohq *OrganizationHistoryQuery) Earliest(ctx context.Context) (*OrganizationHistory, error) {
	return ohq.
		Order(organizationhistory.ByHistoryTime()).
		First(ctx)
}

func (ohq *OrganizationHistoryQuery) Latest(ctx context.Context) (*OrganizationHistory, error) {
	return ohq.
		Order(organizationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ohq *OrganizationHistoryQuery) AsOf(ctx context.Context, time time.Time) (*OrganizationHistory, error) {
	return ohq.
		Where(organizationhistory.HistoryTimeLTE(time)).
		Order(organizationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (oh *OrganizationHistory) Restore(ctx context.Context) (*Organization, error) {
	client := NewOrganizationClient(oh.config)
	return client.
		UpdateOneID(oh.Ref).
		SetUpdatedAt(oh.UpdatedAt).
		SetName(oh.Name).
		SetInfo(oh.Info).
		Save(ctx)
}

func (s *Store) History() *StoreHistoryQuery {
	historyClient := NewStoreHistoryClient(s.config)
	return historyClient.Query().Where(storehistory.Ref(s.ID))
}

func (sh *StoreHistory) Next(ctx context.Context) (*StoreHistory, error) {
	client := NewStoreHistoryClient(sh.config)
	return client.Query().
		Where(
			storehistory.Ref(sh.Ref),
			storehistory.HistoryTimeGT(sh.HistoryTime),
		).
		Order(storehistory.ByHistoryTime()).
		First(ctx)
}

func (sh *StoreHistory) Prev(ctx context.Context) (*StoreHistory, error) {
	client := NewStoreHistoryClient(sh.config)
	return client.Query().
		Where(
			storehistory.Ref(sh.Ref),
			storehistory.HistoryTimeLT(sh.HistoryTime),
		).
		Order(storehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *StoreHistoryQuery) Earliest(ctx context.Context) (*StoreHistory, error) {
	return shq.
		Order(storehistory.ByHistoryTime()).
		First(ctx)
}

func (shq *StoreHistoryQuery) Latest(ctx context.Context) (*StoreHistory, error) {
	return shq.
		Order(storehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *StoreHistoryQuery) AsOf(ctx context.Context, time time.Time) (*StoreHistory, error) {
	return shq.
		Where(storehistory.HistoryTimeLTE(time)).
		Order(storehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (sh *StoreHistory) Restore(ctx context.Context) (*Store, error) {
	client := NewStoreClient(sh.config)
	return client.
		UpdateOneID(sh.Ref).
		SetUpdatedAt(sh.UpdatedAt).
		SetName(sh.Name).
		SetRegion(sh.Region).
		SetOrganizationID(sh.OrganizationID).
		Save(ctx)
}
