// Code generated by enthistory, DO NOT EDIT.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"_examples/updateby_uuid/ent/organizationhistory"
	"_examples/updateby_uuid/ent/storehistory"

	"entgo.io/ent/dialect/sql"
)

func (_m *Organization) History() *OrganizationHistoryQuery {
	historyClient := NewOrganizationHistoryClient(_m.config)
	return historyClient.Query().Where(organizationhistory.Ref(_m.ID))
}

func (_m *OrganizationHistory) Next(ctx context.Context) (*OrganizationHistory, error) {
	client := NewOrganizationHistoryClient(_m.config)
	return client.Query().
		Where(
			organizationhistory.Ref(_m.Ref),
			organizationhistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(organizationhistory.ByHistoryTime()).
		First(ctx)
}

func (_m *OrganizationHistory) Prev(ctx context.Context) (*OrganizationHistory, error) {
	client := NewOrganizationHistoryClient(_m.config)
	return client.Query().
		Where(
			organizationhistory.Ref(_m.Ref),
			organizationhistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(organizationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ohq *OrganizationHistoryQuery) Earliest(ctx context.Context) (*OrganizationHistory, error) {
	return ohq.
		Order(organizationhistory.ByHistoryTime()).
		First(ctx)
}

func (ohq *OrganizationHistoryQuery) Latest(ctx context.Context) (*OrganizationHistory, error) {
	return ohq.
		Order(organizationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (ohq *OrganizationHistoryQuery) AsOf(ctx context.Context, time time.Time) (*OrganizationHistory, error) {
	return ohq.
		Where(organizationhistory.HistoryTimeLTE(time)).
		Order(organizationhistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *OrganizationHistory) Restore(ctx context.Context) (*Organization, error) {
	client := NewOrganizationClient(_m.config)
	return client.
		UpdateOneID(_m.Ref).
		SetUpdatedAt(_m.UpdatedAt).
		SetName(_m.Name).
		SetInfo(_m.Info).
		Save(ctx)
}

func (_m *Store) History() *StoreHistoryQuery {
	historyClient := NewStoreHistoryClient(_m.config)
	return historyClient.Query().Where(storehistory.Ref(_m.ID))
}

func (_m *StoreHistory) Next(ctx context.Context) (*StoreHistory, error) {
	client := NewStoreHistoryClient(_m.config)
	return client.Query().
		Where(
			storehistory.Ref(_m.Ref),
			storehistory.HistoryTimeGT(_m.HistoryTime),
		).
		Order(storehistory.ByHistoryTime()).
		First(ctx)
}

func (_m *StoreHistory) Prev(ctx context.Context) (*StoreHistory, error) {
	client := NewStoreHistoryClient(_m.config)
	return client.Query().
		Where(
			storehistory.Ref(_m.Ref),
			storehistory.HistoryTimeLT(_m.HistoryTime),
		).
		Order(storehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *StoreHistoryQuery) Earliest(ctx context.Context) (*StoreHistory, error) {
	return shq.
		Order(storehistory.ByHistoryTime()).
		First(ctx)
}

func (shq *StoreHistoryQuery) Latest(ctx context.Context) (*StoreHistory, error) {
	return shq.
		Order(storehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (shq *StoreHistoryQuery) AsOf(ctx context.Context, time time.Time) (*StoreHistory, error) {
	return shq.
		Where(storehistory.HistoryTimeLTE(time)).
		Order(storehistory.ByHistoryTime(sql.OrderDesc())).
		First(ctx)
}

func (_m *StoreHistory) Restore(ctx context.Context) (*Store, error) {
	client := NewStoreClient(_m.config)
	return client.
		UpdateOneID(_m.Ref).
		SetUpdatedAt(_m.UpdatedAt).
		SetName(_m.Name).
		SetRegion(_m.Region).
		SetOrganizationID(_m.OrganizationID).
		Save(ctx)
}
