// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"_examples/updateby_uuid/ent/migrate"

	"_examples/updateby_uuid/ent/organization"
	"_examples/updateby_uuid/ent/organizationhistory"
	"_examples/updateby_uuid/ent/store"
	"_examples/updateby_uuid/ent/storehistory"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"

	"github.com/flume/enthistory"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// OrganizationHistory is the client for interacting with the OrganizationHistory builders.
	OrganizationHistory *OrganizationHistoryClient
	// Store is the client for interacting with the Store builders.
	Store *StoreClient
	// StoreHistory is the client for interacting with the StoreHistory builders.
	StoreHistory *StoreHistoryClient
	// historyActivated determines if the history hooks have already been activated
	historyActivated bool
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Organization = NewOrganizationClient(c.config)
	c.OrganizationHistory = NewOrganizationHistoryClient(c.config)
	c.Store = NewStoreClient(c.config)
	c.StoreHistory = NewStoreHistoryClient(c.config)
}

// withHistory adds the history hooks to the appropriate schemas - generated by enthistory
func (c *Client) WithHistory() {
	if !c.historyActivated {

		// Organization hooks
		c.Organization.Use(enthistory.HistoryTriggerInsert[*OrganizationMutation]())
		c.Organization.Use(enthistory.HistoryTriggerUpdate[*OrganizationMutation]())
		c.Organization.Use(enthistory.HistoryTriggerDelete[*OrganizationMutation]())

		// Store hooks
		c.Store.Use(enthistory.HistoryTriggerInsert[*StoreMutation]())
		c.Store.Use(enthistory.HistoryTriggerUpdate[*StoreMutation]())
		c.Store.Use(enthistory.HistoryTriggerDelete[*StoreMutation]())

		c.historyActivated = true
	}
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Organization:        NewOrganizationClient(cfg),
		OrganizationHistory: NewOrganizationHistoryClient(cfg),
		Store:               NewStoreClient(cfg),
		StoreHistory:        NewStoreHistoryClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Organization:        NewOrganizationClient(cfg),
		OrganizationHistory: NewOrganizationHistoryClient(cfg),
		Store:               NewStoreClient(cfg),
		StoreHistory:        NewStoreHistoryClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Organization.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Organization.Use(hooks...)
	c.OrganizationHistory.Use(hooks...)
	c.Store.Use(hooks...)
	c.StoreHistory.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Organization.Intercept(interceptors...)
	c.OrganizationHistory.Intercept(interceptors...)
	c.Store.Intercept(interceptors...)
	c.StoreHistory.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *OrganizationMutation:
		return c.Organization.mutate(ctx, m)
	case *OrganizationHistoryMutation:
		return c.OrganizationHistory.mutate(ctx, m)
	case *StoreMutation:
		return c.Store.mutate(ctx, m)
	case *StoreHistoryMutation:
		return c.StoreHistory.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organization.Intercept(f(g(h())))`.
func (c *OrganizationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Organization = append(c.inters.Organization, interceptors...)
}

// Create returns a builder for creating a Organization entity.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationClient) MapCreateBulk(slice any, setFunc func(*OrganizationCreate, int)) *OrganizationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationCreateBulk{err: fmt.Errorf("calling to OrganizationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id uuid.UUID) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationClient) DeleteOneID(id uuid.UUID) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganization},
		inters: c.Interceptors(),
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id uuid.UUID) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id uuid.UUID) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganizationStores queries the organization_stores edge of a Organization.
func (c *OrganizationClient) QueryOrganizationStores(o *Organization) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.OrganizationStoresTable, organization.OrganizationStoresColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	return c.hooks.Organization
}

// Interceptors returns the client interceptors.
func (c *OrganizationClient) Interceptors() []Interceptor {
	return c.inters.Organization
}

func (c *OrganizationClient) mutate(ctx context.Context, m *OrganizationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Organization mutation op: %q", m.Op())
	}
}

// OrganizationHistoryClient is a client for the OrganizationHistory schema.
type OrganizationHistoryClient struct {
	config
}

// NewOrganizationHistoryClient returns a client for the OrganizationHistory from the given config.
func NewOrganizationHistoryClient(c config) *OrganizationHistoryClient {
	return &OrganizationHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationhistory.Hooks(f(g(h())))`.
func (c *OrganizationHistoryClient) Use(hooks ...Hook) {
	c.hooks.OrganizationHistory = append(c.hooks.OrganizationHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationhistory.Intercept(f(g(h())))`.
func (c *OrganizationHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationHistory = append(c.inters.OrganizationHistory, interceptors...)
}

// Create returns a builder for creating a OrganizationHistory entity.
func (c *OrganizationHistoryClient) Create() *OrganizationHistoryCreate {
	mutation := newOrganizationHistoryMutation(c.config, OpCreate)
	return &OrganizationHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationHistory entities.
func (c *OrganizationHistoryClient) CreateBulk(builders ...*OrganizationHistoryCreate) *OrganizationHistoryCreateBulk {
	return &OrganizationHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationHistoryClient) MapCreateBulk(slice any, setFunc func(*OrganizationHistoryCreate, int)) *OrganizationHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationHistoryCreateBulk{err: fmt.Errorf("calling to OrganizationHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationHistory.
func (c *OrganizationHistoryClient) Update() *OrganizationHistoryUpdate {
	mutation := newOrganizationHistoryMutation(c.config, OpUpdate)
	return &OrganizationHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationHistoryClient) UpdateOne(oh *OrganizationHistory) *OrganizationHistoryUpdateOne {
	mutation := newOrganizationHistoryMutation(c.config, OpUpdateOne, withOrganizationHistory(oh))
	return &OrganizationHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationHistoryClient) UpdateOneID(id int) *OrganizationHistoryUpdateOne {
	mutation := newOrganizationHistoryMutation(c.config, OpUpdateOne, withOrganizationHistoryID(id))
	return &OrganizationHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationHistory.
func (c *OrganizationHistoryClient) Delete() *OrganizationHistoryDelete {
	mutation := newOrganizationHistoryMutation(c.config, OpDelete)
	return &OrganizationHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationHistoryClient) DeleteOne(oh *OrganizationHistory) *OrganizationHistoryDeleteOne {
	return c.DeleteOneID(oh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationHistoryClient) DeleteOneID(id int) *OrganizationHistoryDeleteOne {
	builder := c.Delete().Where(organizationhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationHistoryDeleteOne{builder}
}

// Query returns a query builder for OrganizationHistory.
func (c *OrganizationHistoryClient) Query() *OrganizationHistoryQuery {
	return &OrganizationHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationHistory entity by its id.
func (c *OrganizationHistoryClient) Get(ctx context.Context, id int) (*OrganizationHistory, error) {
	return c.Query().Where(organizationhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationHistoryClient) GetX(ctx context.Context, id int) *OrganizationHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrganizationHistoryClient) Hooks() []Hook {
	return c.hooks.OrganizationHistory
}

// Interceptors returns the client interceptors.
func (c *OrganizationHistoryClient) Interceptors() []Interceptor {
	return c.inters.OrganizationHistory
}

func (c *OrganizationHistoryClient) mutate(ctx context.Context, m *OrganizationHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationHistory mutation op: %q", m.Op())
	}
}

// StoreClient is a client for the Store schema.
type StoreClient struct {
	config
}

// NewStoreClient returns a client for the Store from the given config.
func NewStoreClient(c config) *StoreClient {
	return &StoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `store.Hooks(f(g(h())))`.
func (c *StoreClient) Use(hooks ...Hook) {
	c.hooks.Store = append(c.hooks.Store, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `store.Intercept(f(g(h())))`.
func (c *StoreClient) Intercept(interceptors ...Interceptor) {
	c.inters.Store = append(c.inters.Store, interceptors...)
}

// Create returns a builder for creating a Store entity.
func (c *StoreClient) Create() *StoreCreate {
	mutation := newStoreMutation(c.config, OpCreate)
	return &StoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Store entities.
func (c *StoreClient) CreateBulk(builders ...*StoreCreate) *StoreCreateBulk {
	return &StoreCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StoreClient) MapCreateBulk(slice any, setFunc func(*StoreCreate, int)) *StoreCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StoreCreateBulk{err: fmt.Errorf("calling to StoreClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StoreCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Store.
func (c *StoreClient) Update() *StoreUpdate {
	mutation := newStoreMutation(c.config, OpUpdate)
	return &StoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoreClient) UpdateOne(s *Store) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStore(s))
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoreClient) UpdateOneID(id uuid.UUID) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStoreID(id))
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Store.
func (c *StoreClient) Delete() *StoreDelete {
	mutation := newStoreMutation(c.config, OpDelete)
	return &StoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoreClient) DeleteOne(s *Store) *StoreDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StoreClient) DeleteOneID(id uuid.UUID) *StoreDeleteOne {
	builder := c.Delete().Where(store.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoreDeleteOne{builder}
}

// Query returns a query builder for Store.
func (c *StoreClient) Query() *StoreQuery {
	return &StoreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStore},
		inters: c.Interceptors(),
	}
}

// Get returns a Store entity by its id.
func (c *StoreClient) Get(ctx context.Context, id uuid.UUID) (*Store, error) {
	return c.Query().Where(store.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoreClient) GetX(ctx context.Context, id uuid.UUID) *Store {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a Store.
func (c *StoreClient) QueryOrganization(s *Store) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, store.OrganizationTable, store.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StoreClient) Hooks() []Hook {
	return c.hooks.Store
}

// Interceptors returns the client interceptors.
func (c *StoreClient) Interceptors() []Interceptor {
	return c.inters.Store
}

func (c *StoreClient) mutate(ctx context.Context, m *StoreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StoreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StoreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StoreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Store mutation op: %q", m.Op())
	}
}

// StoreHistoryClient is a client for the StoreHistory schema.
type StoreHistoryClient struct {
	config
}

// NewStoreHistoryClient returns a client for the StoreHistory from the given config.
func NewStoreHistoryClient(c config) *StoreHistoryClient {
	return &StoreHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storehistory.Hooks(f(g(h())))`.
func (c *StoreHistoryClient) Use(hooks ...Hook) {
	c.hooks.StoreHistory = append(c.hooks.StoreHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `storehistory.Intercept(f(g(h())))`.
func (c *StoreHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.StoreHistory = append(c.inters.StoreHistory, interceptors...)
}

// Create returns a builder for creating a StoreHistory entity.
func (c *StoreHistoryClient) Create() *StoreHistoryCreate {
	mutation := newStoreHistoryMutation(c.config, OpCreate)
	return &StoreHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StoreHistory entities.
func (c *StoreHistoryClient) CreateBulk(builders ...*StoreHistoryCreate) *StoreHistoryCreateBulk {
	return &StoreHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StoreHistoryClient) MapCreateBulk(slice any, setFunc func(*StoreHistoryCreate, int)) *StoreHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StoreHistoryCreateBulk{err: fmt.Errorf("calling to StoreHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StoreHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StoreHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StoreHistory.
func (c *StoreHistoryClient) Update() *StoreHistoryUpdate {
	mutation := newStoreHistoryMutation(c.config, OpUpdate)
	return &StoreHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoreHistoryClient) UpdateOne(sh *StoreHistory) *StoreHistoryUpdateOne {
	mutation := newStoreHistoryMutation(c.config, OpUpdateOne, withStoreHistory(sh))
	return &StoreHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoreHistoryClient) UpdateOneID(id int) *StoreHistoryUpdateOne {
	mutation := newStoreHistoryMutation(c.config, OpUpdateOne, withStoreHistoryID(id))
	return &StoreHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StoreHistory.
func (c *StoreHistoryClient) Delete() *StoreHistoryDelete {
	mutation := newStoreHistoryMutation(c.config, OpDelete)
	return &StoreHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoreHistoryClient) DeleteOne(sh *StoreHistory) *StoreHistoryDeleteOne {
	return c.DeleteOneID(sh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StoreHistoryClient) DeleteOneID(id int) *StoreHistoryDeleteOne {
	builder := c.Delete().Where(storehistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoreHistoryDeleteOne{builder}
}

// Query returns a query builder for StoreHistory.
func (c *StoreHistoryClient) Query() *StoreHistoryQuery {
	return &StoreHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStoreHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a StoreHistory entity by its id.
func (c *StoreHistoryClient) Get(ctx context.Context, id int) (*StoreHistory, error) {
	return c.Query().Where(storehistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoreHistoryClient) GetX(ctx context.Context, id int) *StoreHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StoreHistoryClient) Hooks() []Hook {
	return c.hooks.StoreHistory
}

// Interceptors returns the client interceptors.
func (c *StoreHistoryClient) Interceptors() []Interceptor {
	return c.inters.StoreHistory
}

func (c *StoreHistoryClient) mutate(ctx context.Context, m *StoreHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StoreHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StoreHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StoreHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StoreHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StoreHistory mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Organization, OrganizationHistory, Store, StoreHistory []ent.Hook
	}
	inters struct {
		Organization, OrganizationHistory, Store, StoreHistory []ent.Interceptor
	}
)
