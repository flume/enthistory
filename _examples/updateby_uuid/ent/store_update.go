// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/updateby_uuid/ent/organization"
	"_examples/updateby_uuid/ent/predicate"
	"_examples/updateby_uuid/ent/store"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// StoreUpdate is the builder for updating Store entities.
type StoreUpdate struct {
	config
	hooks    []Hook
	mutation *StoreMutation
}

// Where appends a list predicates to the StoreUpdate builder.
func (_u *StoreUpdate) Where(ps ...predicate.Store) *StoreUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StoreUpdate) SetUpdatedAt(v time.Time) *StoreUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *StoreUpdate) SetName(v string) *StoreUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StoreUpdate) SetNillableName(v *string) *StoreUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRegion sets the "region" field.
func (_u *StoreUpdate) SetRegion(v string) *StoreUpdate {
	_u.mutation.SetRegion(v)
	return _u
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (_u *StoreUpdate) SetNillableRegion(v *string) *StoreUpdate {
	if v != nil {
		_u.SetRegion(*v)
	}
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *StoreUpdate) SetOrganizationID(v uuid.UUID) *StoreUpdate {
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *StoreUpdate) SetNillableOrganizationID(v *uuid.UUID) *StoreUpdate {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_u *StoreUpdate) SetOrganization(v *Organization) *StoreUpdate {
	return _u.SetOrganizationID(v.ID)
}

// Mutation returns the StoreMutation object of the builder.
func (_u *StoreUpdate) Mutation() *StoreMutation {
	return _u.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (_u *StoreUpdate) ClearOrganization() *StoreUpdate {
	_u.mutation.ClearOrganization()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StoreUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StoreUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StoreUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StoreUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StoreUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := store.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StoreUpdate) check() error {
	if _u.mutation.OrganizationCleared() && len(_u.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Store.organization"`)
	}
	return nil
}

func (_u *StoreUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(store.Table, store.Columns, sqlgraph.NewFieldSpec(store.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(store.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(store.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Region(); ok {
		_spec.SetField(store.FieldRegion, field.TypeString, value)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.OrganizationTable,
			Columns: []string{store.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.OrganizationTable,
			Columns: []string{store.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StoreUpdateOne is the builder for updating a single Store entity.
type StoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StoreMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StoreUpdateOne) SetUpdatedAt(v time.Time) *StoreUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *StoreUpdateOne) SetName(v string) *StoreUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StoreUpdateOne) SetNillableName(v *string) *StoreUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRegion sets the "region" field.
func (_u *StoreUpdateOne) SetRegion(v string) *StoreUpdateOne {
	_u.mutation.SetRegion(v)
	return _u
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (_u *StoreUpdateOne) SetNillableRegion(v *string) *StoreUpdateOne {
	if v != nil {
		_u.SetRegion(*v)
	}
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *StoreUpdateOne) SetOrganizationID(v uuid.UUID) *StoreUpdateOne {
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *StoreUpdateOne) SetNillableOrganizationID(v *uuid.UUID) *StoreUpdateOne {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_u *StoreUpdateOne) SetOrganization(v *Organization) *StoreUpdateOne {
	return _u.SetOrganizationID(v.ID)
}

// Mutation returns the StoreMutation object of the builder.
func (_u *StoreUpdateOne) Mutation() *StoreMutation {
	return _u.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (_u *StoreUpdateOne) ClearOrganization() *StoreUpdateOne {
	_u.mutation.ClearOrganization()
	return _u
}

// Where appends a list predicates to the StoreUpdate builder.
func (_u *StoreUpdateOne) Where(ps ...predicate.Store) *StoreUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StoreUpdateOne) Select(field string, fields ...string) *StoreUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Store entity.
func (_u *StoreUpdateOne) Save(ctx context.Context) (*Store, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StoreUpdateOne) SaveX(ctx context.Context) *Store {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StoreUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StoreUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StoreUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := store.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StoreUpdateOne) check() error {
	if _u.mutation.OrganizationCleared() && len(_u.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Store.organization"`)
	}
	return nil
}

func (_u *StoreUpdateOne) sqlSave(ctx context.Context) (_node *Store, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(store.Table, store.Columns, sqlgraph.NewFieldSpec(store.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Store.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, store.FieldID)
		for _, f := range fields {
			if !store.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != store.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(store.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(store.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Region(); ok {
		_spec.SetField(store.FieldRegion, field.TypeString, value)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.OrganizationTable,
			Columns: []string{store.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.OrganizationTable,
			Columns: []string{store.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Store{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
