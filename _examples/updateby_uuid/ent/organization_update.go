// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/updateby_uuid/ent/organization"
	"_examples/updateby_uuid/ent/predicate"
	"_examples/updateby_uuid/ent/store"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (_u *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrganizationUpdate) SetUpdatedAt(v time.Time) *OrganizationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *OrganizationUpdate) SetName(v string) *OrganizationUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableName(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetInfo sets the "info" field.
func (_u *OrganizationUpdate) SetInfo(v map[string]interface{}) *OrganizationUpdate {
	_u.mutation.SetInfo(v)
	return _u
}

// ClearInfo clears the value of the "info" field.
func (_u *OrganizationUpdate) ClearInfo() *OrganizationUpdate {
	_u.mutation.ClearInfo()
	return _u
}

// AddOrganizationStoreIDs adds the "organization_stores" edge to the Store entity by IDs.
func (_u *OrganizationUpdate) AddOrganizationStoreIDs(ids ...uuid.UUID) *OrganizationUpdate {
	_u.mutation.AddOrganizationStoreIDs(ids...)
	return _u
}

// AddOrganizationStores adds the "organization_stores" edges to the Store entity.
func (_u *OrganizationUpdate) AddOrganizationStores(v ...*Store) *OrganizationUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrganizationStoreIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (_u *OrganizationUpdate) Mutation() *OrganizationMutation {
	return _u.mutation
}

// ClearOrganizationStores clears all "organization_stores" edges to the Store entity.
func (_u *OrganizationUpdate) ClearOrganizationStores() *OrganizationUpdate {
	_u.mutation.ClearOrganizationStores()
	return _u
}

// RemoveOrganizationStoreIDs removes the "organization_stores" edge to Store entities by IDs.
func (_u *OrganizationUpdate) RemoveOrganizationStoreIDs(ids ...uuid.UUID) *OrganizationUpdate {
	_u.mutation.RemoveOrganizationStoreIDs(ids...)
	return _u
}

// RemoveOrganizationStores removes "organization_stores" edges to Store entities.
func (_u *OrganizationUpdate) RemoveOrganizationStores(v ...*Store) *OrganizationUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrganizationStoreIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrganizationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrganizationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Info(); ok {
		_spec.SetField(organization.FieldInfo, field.TypeJSON, value)
	}
	if _u.mutation.InfoCleared() {
		_spec.ClearField(organization.FieldInfo, field.TypeJSON)
	}
	if _u.mutation.OrganizationStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationStoresTable,
			Columns: []string{organization.OrganizationStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrganizationStoresIDs(); len(nodes) > 0 && !_u.mutation.OrganizationStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationStoresTable,
			Columns: []string{organization.OrganizationStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationStoresTable,
			Columns: []string{organization.OrganizationStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrganizationUpdateOne) SetUpdatedAt(v time.Time) *OrganizationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *OrganizationUpdateOne) SetName(v string) *OrganizationUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableName(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetInfo sets the "info" field.
func (_u *OrganizationUpdateOne) SetInfo(v map[string]interface{}) *OrganizationUpdateOne {
	_u.mutation.SetInfo(v)
	return _u
}

// ClearInfo clears the value of the "info" field.
func (_u *OrganizationUpdateOne) ClearInfo() *OrganizationUpdateOne {
	_u.mutation.ClearInfo()
	return _u
}

// AddOrganizationStoreIDs adds the "organization_stores" edge to the Store entity by IDs.
func (_u *OrganizationUpdateOne) AddOrganizationStoreIDs(ids ...uuid.UUID) *OrganizationUpdateOne {
	_u.mutation.AddOrganizationStoreIDs(ids...)
	return _u
}

// AddOrganizationStores adds the "organization_stores" edges to the Store entity.
func (_u *OrganizationUpdateOne) AddOrganizationStores(v ...*Store) *OrganizationUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrganizationStoreIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (_u *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return _u.mutation
}

// ClearOrganizationStores clears all "organization_stores" edges to the Store entity.
func (_u *OrganizationUpdateOne) ClearOrganizationStores() *OrganizationUpdateOne {
	_u.mutation.ClearOrganizationStores()
	return _u
}

// RemoveOrganizationStoreIDs removes the "organization_stores" edge to Store entities by IDs.
func (_u *OrganizationUpdateOne) RemoveOrganizationStoreIDs(ids ...uuid.UUID) *OrganizationUpdateOne {
	_u.mutation.RemoveOrganizationStoreIDs(ids...)
	return _u
}

// RemoveOrganizationStores removes "organization_stores" edges to Store entities.
func (_u *OrganizationUpdateOne) RemoveOrganizationStores(v ...*Store) *OrganizationUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrganizationStoreIDs(ids...)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (_u *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Organization entity.
func (_u *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrganizationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Info(); ok {
		_spec.SetField(organization.FieldInfo, field.TypeJSON, value)
	}
	if _u.mutation.InfoCleared() {
		_spec.ClearField(organization.FieldInfo, field.TypeJSON)
	}
	if _u.mutation.OrganizationStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationStoresTable,
			Columns: []string{organization.OrganizationStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrganizationStoresIDs(); len(nodes) > 0 && !_u.mutation.OrganizationStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationStoresTable,
			Columns: []string{organization.OrganizationStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationStoresTable,
			Columns: []string{organization.OrganizationStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Organization{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
