// Code generated by enthistory, DO NOT EDIT.
package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/field"
	"entgo.io/ent/schema/index"
	"github.com/google/uuid"

	"github.com/flume/enthistory"

	"time"
)

// OrganizationHistory holds the schema definition for the OrganizationHistory entity.
type OrganizationHistory struct {
	ent.Schema
}

// Annotations of the OrganizationHistory.
func (OrganizationHistory) Annotations() []schema.Annotation {
	return []schema.Annotation{
		entsql.Annotation{
			Table: "Organization_history",
		},
		enthistory.Annotations{
			IsHistory: true,
			Exclude:   true,
		},
	}
}

// Fields of the OrganizationHistory.
func (OrganizationHistory) Fields() []ent.Field {
	historyFields := []ent.Field{
		field.Time("history_time").
			Default(time.Now).
			Immutable(),
		field.UUID("ref", uuid.UUID{}).
			Immutable().
			Optional(),
		field.Enum("operation").
			GoType(enthistory.OpType("")).
			Immutable(),
		field.UUID("updated_by", uuid.UUID{}).
			Optional().
			Immutable().
			Nillable(),
	}

	original := Organization{}
	for _, field := range original.Fields() {
		if field.Descriptor().Name != "id" {
			historyFields = append(historyFields, field)
		}
	}

	return historyFields
}

// Mixin of the OrganizationHistory.
func (OrganizationHistory) Mixin() []ent.Mixin {
	return Organization{}.Mixin()
}
func (OrganizationHistory) Indexes() []ent.Index {
	return []ent.Index{
		index.Fields("history_time"),
	}
}
