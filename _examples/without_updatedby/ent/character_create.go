// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/without_updatedby/ent/character"
	"_examples/without_updatedby/ent/friendship"
	"_examples/without_updatedby/ent/residence"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CharacterCreate is the builder for creating a Character entity.
type CharacterCreate struct {
	config
	mutation *CharacterMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *CharacterCreate) SetCreatedAt(v time.Time) *CharacterCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CharacterCreate) SetNillableCreatedAt(v *time.Time) *CharacterCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *CharacterCreate) SetUpdatedAt(v time.Time) *CharacterCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *CharacterCreate) SetNillableUpdatedAt(v *time.Time) *CharacterCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetAge sets the "age" field.
func (_c *CharacterCreate) SetAge(v int) *CharacterCreate {
	_c.mutation.SetAge(v)
	return _c
}

// SetName sets the "name" field.
func (_c *CharacterCreate) SetName(v string) *CharacterCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNicknames sets the "nicknames" field.
func (_c *CharacterCreate) SetNicknames(v []string) *CharacterCreate {
	_c.mutation.SetNicknames(v)
	return _c
}

// SetInfo sets the "info" field.
func (_c *CharacterCreate) SetInfo(v map[string]interface{}) *CharacterCreate {
	_c.mutation.SetInfo(v)
	return _c
}

// AddFriendIDs adds the "friends" edge to the Character entity by IDs.
func (_c *CharacterCreate) AddFriendIDs(ids ...int) *CharacterCreate {
	_c.mutation.AddFriendIDs(ids...)
	return _c
}

// AddFriends adds the "friends" edges to the Character entity.
func (_c *CharacterCreate) AddFriends(v ...*Character) *CharacterCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFriendIDs(ids...)
}

// SetResidenceID sets the "residence" edge to the Residence entity by ID.
func (_c *CharacterCreate) SetResidenceID(id uuid.UUID) *CharacterCreate {
	_c.mutation.SetResidenceID(id)
	return _c
}

// SetNillableResidenceID sets the "residence" edge to the Residence entity by ID if the given value is not nil.
func (_c *CharacterCreate) SetNillableResidenceID(id *uuid.UUID) *CharacterCreate {
	if id != nil {
		_c = _c.SetResidenceID(*id)
	}
	return _c
}

// SetResidence sets the "residence" edge to the Residence entity.
func (_c *CharacterCreate) SetResidence(v *Residence) *CharacterCreate {
	return _c.SetResidenceID(v.ID)
}

// AddFriendshipIDs adds the "friendships" edge to the Friendship entity by IDs.
func (_c *CharacterCreate) AddFriendshipIDs(ids ...string) *CharacterCreate {
	_c.mutation.AddFriendshipIDs(ids...)
	return _c
}

// AddFriendships adds the "friendships" edges to the Friendship entity.
func (_c *CharacterCreate) AddFriendships(v ...*Friendship) *CharacterCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFriendshipIDs(ids...)
}

// Mutation returns the CharacterMutation object of the builder.
func (_c *CharacterCreate) Mutation() *CharacterMutation {
	return _c.mutation
}

// Save creates the Character in the database.
func (_c *CharacterCreate) Save(ctx context.Context) (*Character, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CharacterCreate) SaveX(ctx context.Context) *Character {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CharacterCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CharacterCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CharacterCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := character.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := character.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CharacterCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Character.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Character.updated_at"`)}
	}
	if _, ok := _c.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "Character.age"`)}
	}
	if v, ok := _c.mutation.Age(); ok {
		if err := character.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "Character.age": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Character.name"`)}
	}
	return nil
}

func (_c *CharacterCreate) sqlSave(ctx context.Context) (*Character, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CharacterCreate) createSpec() (*Character, *sqlgraph.CreateSpec) {
	var (
		_node = &Character{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(character.Table, sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(character.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(character.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Age(); ok {
		_spec.SetField(character.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(character.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Nicknames(); ok {
		_spec.SetField(character.FieldNicknames, field.TypeJSON, value)
		_node.Nicknames = value
	}
	if value, ok := _c.mutation.Info(); ok {
		_spec.SetField(character.FieldInfo, field.TypeJSON, value)
		_node.Info = value
	}
	if nodes := _c.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   character.FriendsTable,
			Columns: character.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FriendshipCreate{config: _c.config, mutation: newFriendshipMutation(_c.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ResidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   character.ResidenceTable,
			Columns: []string{character.ResidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(residence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.residence_occupants = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FriendshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   character.FriendshipsTable,
			Columns: []string{character.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(friendship.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CharacterCreateBulk is the builder for creating many Character entities in bulk.
type CharacterCreateBulk struct {
	config
	err      error
	builders []*CharacterCreate
}

// Save creates the Character entities in the database.
func (_c *CharacterCreateBulk) Save(ctx context.Context) ([]*Character, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Character, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CharacterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CharacterCreateBulk) SaveX(ctx context.Context) []*Character {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CharacterCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CharacterCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
