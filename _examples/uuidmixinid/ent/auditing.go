// Code generated by enthistory, DO NOT EDIT.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"reflect"
	"time"

	"_examples/uuidmixinid/ent/menuitemhistory"

	"github.com/google/uuid"

	"github.com/flume/enthistory"
)

type Change struct {
	FieldName string
	Old       any
	New       any
}

func NewChange(fieldName string, old, new any) Change {
	return Change{
		FieldName: fieldName,
		Old:       old,
		New:       new,
	}
}

type HistoryDiff[T any] struct {
	Old     *T
	New     *T
	Changes []Change
}

var (
	MismatchedRefError = errors.New("cannot take diff of histories with different Refs")
)

func (mih *MenuItemHistory) changes(new *MenuItemHistory) []Change {
	var changes []Change
	if !reflect.DeepEqual(mih.CreatedAt, new.CreatedAt) {
		changes = append(changes, NewChange(menuitemhistory.FieldCreatedAt, mih.CreatedAt, new.CreatedAt))
	}
	if !reflect.DeepEqual(mih.UpdatedAt, new.UpdatedAt) {
		changes = append(changes, NewChange(menuitemhistory.FieldUpdatedAt, mih.UpdatedAt, new.UpdatedAt))
	}
	if !reflect.DeepEqual(mih.Name, new.Name) {
		changes = append(changes, NewChange(menuitemhistory.FieldName, mih.Name, new.Name))
	}
	if !reflect.DeepEqual(mih.Price, new.Price) {
		changes = append(changes, NewChange(menuitemhistory.FieldPrice, mih.Price, new.Price))
	}
	if !reflect.DeepEqual(mih.Description, new.Description) {
		changes = append(changes, NewChange(menuitemhistory.FieldDescription, mih.Description, new.Description))
	}
	return changes
}

func (mih *MenuItemHistory) Diff(history *MenuItemHistory) (*HistoryDiff[MenuItemHistory], error) {
	if mih.Ref != history.Ref {
		return nil, MismatchedRefError
	}
	if mih.HistoryTime.UnixMilli() > history.HistoryTime.UnixMilli() || (mih.HistoryTime.UnixMilli() == history.HistoryTime.UnixMilli() && mih.ID > history.ID) {
		return &HistoryDiff[MenuItemHistory]{
			Old:     history,
			New:     mih,
			Changes: history.changes(mih),
		}, nil
	}
	return &HistoryDiff[MenuItemHistory]{
		Old:     mih,
		New:     history,
		Changes: mih.changes(history),
	}, nil
}

func (c Change) String(op enthistory.OpType) string {
	var newstr, oldstr string
	if c.New != nil {
		val, err := json.Marshal(c.New)
		if err != nil {
			newstr = fmt.Sprintf("%#v", c.New)
		} else {
			newstr = string(val)
		}
	}
	if c.Old != nil {
		val, err := json.Marshal(c.Old)
		if err != nil {
			oldstr = fmt.Sprintf("%#v", c.Old)
		} else {
			oldstr = string(val)
		}
	}
	switch op {
	case enthistory.OpTypeInsert:
		return fmt.Sprintf("%s: %s", c.FieldName, newstr)
	case enthistory.OpTypeDelete:
		return fmt.Sprintf("%s: %s", c.FieldName, oldstr)
	default:
		return fmt.Sprintf("%s: %s -> %s", c.FieldName, oldstr, newstr)
	}
}

func (c *Client) Audit(ctx context.Context) ([][]string, error) {
	records := [][]string{
		{"Table", "Ref Id", "History Time", "Operation", "Changes", "Updated By"},
	}
	var rec [][]string
	var err error
	rec, err = auditMenuItemHistory(ctx, c.config)
	if err != nil {
		return nil, err
	}
	records = append(records, rec...)

	return records, nil
}

type record struct {
	Table       string
	RefId       any
	HistoryTime time.Time
	Operation   enthistory.OpType
	Changes     []Change
	UpdatedBy   *uuid.UUID
}

func (r *record) toRow() []string {
	row := make([]string, 6)

	row[0] = r.Table
	row[1] = fmt.Sprintf("%v", r.RefId)
	row[2] = r.HistoryTime.Format(time.ANSIC)
	row[3] = r.Operation.String()
	for i, change := range r.Changes {
		if i == 0 {
			row[4] = change.String(r.Operation)
			continue
		}
		row[4] = fmt.Sprintf("%s\n%s", row[4], change.String(r.Operation))
	}
	if r.UpdatedBy != nil {
		row[5] = fmt.Sprintf("%v", *r.UpdatedBy)
	}
	return row
}

type menuitemhistoryref struct {
	Ref uuid.UUID
}

func auditMenuItemHistory(ctx context.Context, config config) ([][]string, error) {
	var records = [][]string{}
	var refs []menuitemhistoryref
	client := NewMenuItemHistoryClient(config)
	err := client.Query().
		Unique(true).
		Order(menuitemhistory.ByHistoryTime()).
		Select(menuitemhistory.FieldRef).
		Scan(ctx, &refs)

	if err != nil {
		return nil, err
	}
	for _, currRef := range refs {
		histories, err := client.Query().
			Where(menuitemhistory.Ref(currRef.Ref)).
			Order(menuitemhistory.ByHistoryTime()).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for i := 0; i < len(histories); i++ {
			curr := histories[i]
			r := record{
				Table:       "MenuItemHistory",
				RefId:       curr.Ref,
				HistoryTime: curr.HistoryTime,
				Operation:   curr.Operation,
				UpdatedBy:   curr.UpdatedBy,
			}
			switch curr.Operation {
			case enthistory.OpTypeInsert:
				r.Changes = (&MenuItemHistory{}).changes(curr)
			case enthistory.OpTypeDelete:
				r.Changes = curr.changes(&MenuItemHistory{})
			default:
				if i == 0 {
					r.Changes = (&MenuItemHistory{}).changes(curr)
				} else {
					r.Changes = histories[i-1].changes(curr)
				}
			}
			records = append(records, r.toRow())
		}
	}
	return records, nil
}
