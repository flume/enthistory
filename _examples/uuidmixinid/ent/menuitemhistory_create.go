// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/uuidmixinid/ent/menuitemhistory"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/flume/enthistory"
)

// MenuItemHistoryCreate is the builder for creating a MenuItemHistory entity.
type MenuItemHistoryCreate struct {
	config
	mutation *MenuItemHistoryMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mihc *MenuItemHistoryCreate) SetCreatedAt(t time.Time) *MenuItemHistoryCreate {
	mihc.mutation.SetCreatedAt(t)
	return mihc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mihc *MenuItemHistoryCreate) SetNillableCreatedAt(t *time.Time) *MenuItemHistoryCreate {
	if t != nil {
		mihc.SetCreatedAt(*t)
	}
	return mihc
}

// SetUpdatedAt sets the "updated_at" field.
func (mihc *MenuItemHistoryCreate) SetUpdatedAt(t time.Time) *MenuItemHistoryCreate {
	mihc.mutation.SetUpdatedAt(t)
	return mihc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mihc *MenuItemHistoryCreate) SetNillableUpdatedAt(t *time.Time) *MenuItemHistoryCreate {
	if t != nil {
		mihc.SetUpdatedAt(*t)
	}
	return mihc
}

// SetHistoryTime sets the "history_time" field.
func (mihc *MenuItemHistoryCreate) SetHistoryTime(t time.Time) *MenuItemHistoryCreate {
	mihc.mutation.SetHistoryTime(t)
	return mihc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (mihc *MenuItemHistoryCreate) SetNillableHistoryTime(t *time.Time) *MenuItemHistoryCreate {
	if t != nil {
		mihc.SetHistoryTime(*t)
	}
	return mihc
}

// SetOperation sets the "operation" field.
func (mihc *MenuItemHistoryCreate) SetOperation(et enthistory.OpType) *MenuItemHistoryCreate {
	mihc.mutation.SetOperation(et)
	return mihc
}

// SetRef sets the "ref" field.
func (mihc *MenuItemHistoryCreate) SetRef(u uuid.UUID) *MenuItemHistoryCreate {
	mihc.mutation.SetRef(u)
	return mihc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (mihc *MenuItemHistoryCreate) SetNillableRef(u *uuid.UUID) *MenuItemHistoryCreate {
	if u != nil {
		mihc.SetRef(*u)
	}
	return mihc
}

// SetUpdatedBy sets the "updated_by" field.
func (mihc *MenuItemHistoryCreate) SetUpdatedBy(u uuid.UUID) *MenuItemHistoryCreate {
	mihc.mutation.SetUpdatedBy(u)
	return mihc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mihc *MenuItemHistoryCreate) SetNillableUpdatedBy(u *uuid.UUID) *MenuItemHistoryCreate {
	if u != nil {
		mihc.SetUpdatedBy(*u)
	}
	return mihc
}

// SetName sets the "name" field.
func (mihc *MenuItemHistoryCreate) SetName(s string) *MenuItemHistoryCreate {
	mihc.mutation.SetName(s)
	return mihc
}

// SetPrice sets the "price" field.
func (mihc *MenuItemHistoryCreate) SetPrice(f float64) *MenuItemHistoryCreate {
	mihc.mutation.SetPrice(f)
	return mihc
}

// SetDescription sets the "description" field.
func (mihc *MenuItemHistoryCreate) SetDescription(s string) *MenuItemHistoryCreate {
	mihc.mutation.SetDescription(s)
	return mihc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mihc *MenuItemHistoryCreate) SetNillableDescription(s *string) *MenuItemHistoryCreate {
	if s != nil {
		mihc.SetDescription(*s)
	}
	return mihc
}

// SetID sets the "id" field.
func (mihc *MenuItemHistoryCreate) SetID(u uuid.UUID) *MenuItemHistoryCreate {
	mihc.mutation.SetID(u)
	return mihc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mihc *MenuItemHistoryCreate) SetNillableID(u *uuid.UUID) *MenuItemHistoryCreate {
	if u != nil {
		mihc.SetID(*u)
	}
	return mihc
}

// Mutation returns the MenuItemHistoryMutation object of the builder.
func (mihc *MenuItemHistoryCreate) Mutation() *MenuItemHistoryMutation {
	return mihc.mutation
}

// Save creates the MenuItemHistory in the database.
func (mihc *MenuItemHistoryCreate) Save(ctx context.Context) (*MenuItemHistory, error) {
	mihc.defaults()
	return withHooks(ctx, mihc.sqlSave, mihc.mutation, mihc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mihc *MenuItemHistoryCreate) SaveX(ctx context.Context) *MenuItemHistory {
	v, err := mihc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mihc *MenuItemHistoryCreate) Exec(ctx context.Context) error {
	_, err := mihc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mihc *MenuItemHistoryCreate) ExecX(ctx context.Context) {
	if err := mihc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mihc *MenuItemHistoryCreate) defaults() {
	if _, ok := mihc.mutation.CreatedAt(); !ok {
		v := menuitemhistory.DefaultCreatedAt()
		mihc.mutation.SetCreatedAt(v)
	}
	if _, ok := mihc.mutation.UpdatedAt(); !ok {
		v := menuitemhistory.DefaultUpdatedAt()
		mihc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mihc.mutation.HistoryTime(); !ok {
		v := menuitemhistory.DefaultHistoryTime()
		mihc.mutation.SetHistoryTime(v)
	}
	if _, ok := mihc.mutation.ID(); !ok {
		v := menuitemhistory.DefaultID()
		mihc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mihc *MenuItemHistoryCreate) check() error {
	if _, ok := mihc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MenuItemHistory.created_at"`)}
	}
	if _, ok := mihc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MenuItemHistory.updated_at"`)}
	}
	if _, ok := mihc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`ent: missing required field "MenuItemHistory.history_time"`)}
	}
	if _, ok := mihc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "MenuItemHistory.operation"`)}
	}
	if v, ok := mihc.mutation.Operation(); ok {
		if err := menuitemhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "MenuItemHistory.operation": %w`, err)}
		}
	}
	if _, ok := mihc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MenuItemHistory.name"`)}
	}
	if _, ok := mihc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "MenuItemHistory.price"`)}
	}
	return nil
}

func (mihc *MenuItemHistoryCreate) sqlSave(ctx context.Context) (*MenuItemHistory, error) {
	if err := mihc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mihc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mihc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mihc.mutation.id = &_node.ID
	mihc.mutation.done = true
	return _node, nil
}

func (mihc *MenuItemHistoryCreate) createSpec() (*MenuItemHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &MenuItemHistory{config: mihc.config}
		_spec = sqlgraph.NewCreateSpec(menuitemhistory.Table, sqlgraph.NewFieldSpec(menuitemhistory.FieldID, field.TypeUUID))
	)
	if id, ok := mihc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mihc.mutation.CreatedAt(); ok {
		_spec.SetField(menuitemhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mihc.mutation.UpdatedAt(); ok {
		_spec.SetField(menuitemhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mihc.mutation.HistoryTime(); ok {
		_spec.SetField(menuitemhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := mihc.mutation.Operation(); ok {
		_spec.SetField(menuitemhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := mihc.mutation.Ref(); ok {
		_spec.SetField(menuitemhistory.FieldRef, field.TypeUUID, value)
		_node.Ref = value
	}
	if value, ok := mihc.mutation.UpdatedBy(); ok {
		_spec.SetField(menuitemhistory.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = &value
	}
	if value, ok := mihc.mutation.Name(); ok {
		_spec.SetField(menuitemhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mihc.mutation.Price(); ok {
		_spec.SetField(menuitemhistory.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := mihc.mutation.Description(); ok {
		_spec.SetField(menuitemhistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	return _node, _spec
}

// MenuItemHistoryCreateBulk is the builder for creating many MenuItemHistory entities in bulk.
type MenuItemHistoryCreateBulk struct {
	config
	err      error
	builders []*MenuItemHistoryCreate
}

// Save creates the MenuItemHistory entities in the database.
func (mihcb *MenuItemHistoryCreateBulk) Save(ctx context.Context) ([]*MenuItemHistory, error) {
	if mihcb.err != nil {
		return nil, mihcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mihcb.builders))
	nodes := make([]*MenuItemHistory, len(mihcb.builders))
	mutators := make([]Mutator, len(mihcb.builders))
	for i := range mihcb.builders {
		func(i int, root context.Context) {
			builder := mihcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuItemHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mihcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mihcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mihcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mihcb *MenuItemHistoryCreateBulk) SaveX(ctx context.Context) []*MenuItemHistory {
	v, err := mihcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mihcb *MenuItemHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := mihcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mihcb *MenuItemHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := mihcb.Exec(ctx); err != nil {
		panic(err)
	}
}
