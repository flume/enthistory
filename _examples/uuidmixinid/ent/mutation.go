// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/uuidmixinid/ent/menuitem"
	"_examples/uuidmixinid/ent/menuitemhistory"
	"_examples/uuidmixinid/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"github.com/flume/enthistory"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMenuItem        = "MenuItem"
	TypeMenuItemHistory = "MenuItemHistory"
)

// MenuItemMutation represents an operation that mutates the MenuItem nodes in the graph.
type MenuItemMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	price         *float64
	addprice      *float64
	description   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MenuItem, error)
	predicates    []predicate.MenuItem
}

var _ ent.Mutation = (*MenuItemMutation)(nil)

// menuitemOption allows management of the mutation configuration using functional options.
type menuitemOption func(*MenuItemMutation)

// newMenuItemMutation creates new mutation for the MenuItem entity.
func newMenuItemMutation(c config, op Op, opts ...menuitemOption) *MenuItemMutation {
	m := &MenuItemMutation{
		config:        c,
		op:            op,
		typ:           TypeMenuItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMenuItemID sets the ID field of the mutation.
func withMenuItemID(id uuid.UUID) menuitemOption {
	return func(m *MenuItemMutation) {
		var (
			err   error
			once  sync.Once
			value *MenuItem
		)
		m.oldValue = func(ctx context.Context) (*MenuItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MenuItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMenuItem sets the old MenuItem of the mutation.
func withMenuItem(node *MenuItem) menuitemOption {
	return func(m *MenuItemMutation) {
		m.oldValue = func(context.Context) (*MenuItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MenuItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MenuItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MenuItem entities.
func (m *MenuItemMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MenuItemMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MenuItemMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MenuItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MenuItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MenuItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MenuItem entity.
// If the MenuItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MenuItemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MenuItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MenuItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MenuItem entity.
// If the MenuItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MenuItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *MenuItemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MenuItemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MenuItem entity.
// If the MenuItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MenuItemMutation) ResetName() {
	m.name = nil
}

// SetPrice sets the "price" field.
func (m *MenuItemMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *MenuItemMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the MenuItem entity.
// If the MenuItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *MenuItemMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *MenuItemMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *MenuItemMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetDescription sets the "description" field.
func (m *MenuItemMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MenuItemMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the MenuItem entity.
// If the MenuItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *MenuItemMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[menuitem.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *MenuItemMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[menuitem.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *MenuItemMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, menuitem.FieldDescription)
}

// Where appends a list predicates to the MenuItemMutation builder.
func (m *MenuItemMutation) Where(ps ...predicate.MenuItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MenuItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MenuItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MenuItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MenuItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MenuItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MenuItem).
func (m *MenuItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MenuItemMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, menuitem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, menuitem.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, menuitem.FieldName)
	}
	if m.price != nil {
		fields = append(fields, menuitem.FieldPrice)
	}
	if m.description != nil {
		fields = append(fields, menuitem.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MenuItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case menuitem.FieldCreatedAt:
		return m.CreatedAt()
	case menuitem.FieldUpdatedAt:
		return m.UpdatedAt()
	case menuitem.FieldName:
		return m.Name()
	case menuitem.FieldPrice:
		return m.Price()
	case menuitem.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MenuItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case menuitem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case menuitem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case menuitem.FieldName:
		return m.OldName(ctx)
	case menuitem.FieldPrice:
		return m.OldPrice(ctx)
	case menuitem.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown MenuItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MenuItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case menuitem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case menuitem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case menuitem.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case menuitem.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case menuitem.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown MenuItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MenuItemMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, menuitem.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MenuItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case menuitem.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MenuItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case menuitem.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown MenuItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MenuItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(menuitem.FieldDescription) {
		fields = append(fields, menuitem.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MenuItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MenuItemMutation) ClearField(name string) error {
	switch name {
	case menuitem.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown MenuItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MenuItemMutation) ResetField(name string) error {
	switch name {
	case menuitem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case menuitem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case menuitem.FieldName:
		m.ResetName()
		return nil
	case menuitem.FieldPrice:
		m.ResetPrice()
		return nil
	case menuitem.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown MenuItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MenuItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MenuItemMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MenuItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MenuItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MenuItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MenuItemMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MenuItemMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MenuItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MenuItemMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MenuItem edge %s", name)
}

// MenuItemHistoryMutation represents an operation that mutates the MenuItemHistory nodes in the graph.
type MenuItemHistoryMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	history_time  *time.Time
	operation     *enthistory.OpType
	ref           *uuid.UUID
	updated_by    *uuid.UUID
	name          *string
	price         *float64
	addprice      *float64
	description   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MenuItemHistory, error)
	predicates    []predicate.MenuItemHistory
}

var _ ent.Mutation = (*MenuItemHistoryMutation)(nil)

// menuitemhistoryOption allows management of the mutation configuration using functional options.
type menuitemhistoryOption func(*MenuItemHistoryMutation)

// newMenuItemHistoryMutation creates new mutation for the MenuItemHistory entity.
func newMenuItemHistoryMutation(c config, op Op, opts ...menuitemhistoryOption) *MenuItemHistoryMutation {
	m := &MenuItemHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeMenuItemHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMenuItemHistoryID sets the ID field of the mutation.
func withMenuItemHistoryID(id uuid.UUID) menuitemhistoryOption {
	return func(m *MenuItemHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *MenuItemHistory
		)
		m.oldValue = func(ctx context.Context) (*MenuItemHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MenuItemHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMenuItemHistory sets the old MenuItemHistory of the mutation.
func withMenuItemHistory(node *MenuItemHistory) menuitemhistoryOption {
	return func(m *MenuItemHistoryMutation) {
		m.oldValue = func(context.Context) (*MenuItemHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MenuItemHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MenuItemHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MenuItemHistory entities.
func (m *MenuItemHistoryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MenuItemHistoryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MenuItemHistoryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MenuItemHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MenuItemHistoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MenuItemHistoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MenuItemHistory entity.
// If the MenuItemHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemHistoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MenuItemHistoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MenuItemHistoryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MenuItemHistoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MenuItemHistory entity.
// If the MenuItemHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemHistoryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MenuItemHistoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetHistoryTime sets the "history_time" field.
func (m *MenuItemHistoryMutation) SetHistoryTime(t time.Time) {
	m.history_time = &t
}

// HistoryTime returns the value of the "history_time" field in the mutation.
func (m *MenuItemHistoryMutation) HistoryTime() (r time.Time, exists bool) {
	v := m.history_time
	if v == nil {
		return
	}
	return *v, true
}

// OldHistoryTime returns the old "history_time" field's value of the MenuItemHistory entity.
// If the MenuItemHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemHistoryMutation) OldHistoryTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHistoryTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHistoryTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHistoryTime: %w", err)
	}
	return oldValue.HistoryTime, nil
}

// ResetHistoryTime resets all changes to the "history_time" field.
func (m *MenuItemHistoryMutation) ResetHistoryTime() {
	m.history_time = nil
}

// SetOperation sets the "operation" field.
func (m *MenuItemHistoryMutation) SetOperation(et enthistory.OpType) {
	m.operation = &et
}

// Operation returns the value of the "operation" field in the mutation.
func (m *MenuItemHistoryMutation) Operation() (r enthistory.OpType, exists bool) {
	v := m.operation
	if v == nil {
		return
	}
	return *v, true
}

// OldOperation returns the old "operation" field's value of the MenuItemHistory entity.
// If the MenuItemHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemHistoryMutation) OldOperation(ctx context.Context) (v enthistory.OpType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperation: %w", err)
	}
	return oldValue.Operation, nil
}

// ResetOperation resets all changes to the "operation" field.
func (m *MenuItemHistoryMutation) ResetOperation() {
	m.operation = nil
}

// SetRef sets the "ref" field.
func (m *MenuItemHistoryMutation) SetRef(u uuid.UUID) {
	m.ref = &u
}

// Ref returns the value of the "ref" field in the mutation.
func (m *MenuItemHistoryMutation) Ref() (r uuid.UUID, exists bool) {
	v := m.ref
	if v == nil {
		return
	}
	return *v, true
}

// OldRef returns the old "ref" field's value of the MenuItemHistory entity.
// If the MenuItemHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemHistoryMutation) OldRef(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRef is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRef requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRef: %w", err)
	}
	return oldValue.Ref, nil
}

// ClearRef clears the value of the "ref" field.
func (m *MenuItemHistoryMutation) ClearRef() {
	m.ref = nil
	m.clearedFields[menuitemhistory.FieldRef] = struct{}{}
}

// RefCleared returns if the "ref" field was cleared in this mutation.
func (m *MenuItemHistoryMutation) RefCleared() bool {
	_, ok := m.clearedFields[menuitemhistory.FieldRef]
	return ok
}

// ResetRef resets all changes to the "ref" field.
func (m *MenuItemHistoryMutation) ResetRef() {
	m.ref = nil
	delete(m.clearedFields, menuitemhistory.FieldRef)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *MenuItemHistoryMutation) SetUpdatedBy(u uuid.UUID) {
	m.updated_by = &u
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *MenuItemHistoryMutation) UpdatedBy() (r uuid.UUID, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the MenuItemHistory entity.
// If the MenuItemHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemHistoryMutation) OldUpdatedBy(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *MenuItemHistoryMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[menuitemhistory.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *MenuItemHistoryMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[menuitemhistory.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *MenuItemHistoryMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, menuitemhistory.FieldUpdatedBy)
}

// SetName sets the "name" field.
func (m *MenuItemHistoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MenuItemHistoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MenuItemHistory entity.
// If the MenuItemHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemHistoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MenuItemHistoryMutation) ResetName() {
	m.name = nil
}

// SetPrice sets the "price" field.
func (m *MenuItemHistoryMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *MenuItemHistoryMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the MenuItemHistory entity.
// If the MenuItemHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemHistoryMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *MenuItemHistoryMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *MenuItemHistoryMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *MenuItemHistoryMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetDescription sets the "description" field.
func (m *MenuItemHistoryMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MenuItemHistoryMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the MenuItemHistory entity.
// If the MenuItemHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuItemHistoryMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *MenuItemHistoryMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[menuitemhistory.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *MenuItemHistoryMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[menuitemhistory.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *MenuItemHistoryMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, menuitemhistory.FieldDescription)
}

// Where appends a list predicates to the MenuItemHistoryMutation builder.
func (m *MenuItemHistoryMutation) Where(ps ...predicate.MenuItemHistory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MenuItemHistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MenuItemHistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MenuItemHistory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MenuItemHistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MenuItemHistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MenuItemHistory).
func (m *MenuItemHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MenuItemHistoryMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, menuitemhistory.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, menuitemhistory.FieldUpdatedAt)
	}
	if m.history_time != nil {
		fields = append(fields, menuitemhistory.FieldHistoryTime)
	}
	if m.operation != nil {
		fields = append(fields, menuitemhistory.FieldOperation)
	}
	if m.ref != nil {
		fields = append(fields, menuitemhistory.FieldRef)
	}
	if m.updated_by != nil {
		fields = append(fields, menuitemhistory.FieldUpdatedBy)
	}
	if m.name != nil {
		fields = append(fields, menuitemhistory.FieldName)
	}
	if m.price != nil {
		fields = append(fields, menuitemhistory.FieldPrice)
	}
	if m.description != nil {
		fields = append(fields, menuitemhistory.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MenuItemHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case menuitemhistory.FieldCreatedAt:
		return m.CreatedAt()
	case menuitemhistory.FieldUpdatedAt:
		return m.UpdatedAt()
	case menuitemhistory.FieldHistoryTime:
		return m.HistoryTime()
	case menuitemhistory.FieldOperation:
		return m.Operation()
	case menuitemhistory.FieldRef:
		return m.Ref()
	case menuitemhistory.FieldUpdatedBy:
		return m.UpdatedBy()
	case menuitemhistory.FieldName:
		return m.Name()
	case menuitemhistory.FieldPrice:
		return m.Price()
	case menuitemhistory.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MenuItemHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case menuitemhistory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case menuitemhistory.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case menuitemhistory.FieldHistoryTime:
		return m.OldHistoryTime(ctx)
	case menuitemhistory.FieldOperation:
		return m.OldOperation(ctx)
	case menuitemhistory.FieldRef:
		return m.OldRef(ctx)
	case menuitemhistory.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case menuitemhistory.FieldName:
		return m.OldName(ctx)
	case menuitemhistory.FieldPrice:
		return m.OldPrice(ctx)
	case menuitemhistory.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown MenuItemHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MenuItemHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case menuitemhistory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case menuitemhistory.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case menuitemhistory.FieldHistoryTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHistoryTime(v)
		return nil
	case menuitemhistory.FieldOperation:
		v, ok := value.(enthistory.OpType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperation(v)
		return nil
	case menuitemhistory.FieldRef:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRef(v)
		return nil
	case menuitemhistory.FieldUpdatedBy:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case menuitemhistory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case menuitemhistory.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case menuitemhistory.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown MenuItemHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MenuItemHistoryMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, menuitemhistory.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MenuItemHistoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case menuitemhistory.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MenuItemHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case menuitemhistory.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown MenuItemHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MenuItemHistoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(menuitemhistory.FieldRef) {
		fields = append(fields, menuitemhistory.FieldRef)
	}
	if m.FieldCleared(menuitemhistory.FieldUpdatedBy) {
		fields = append(fields, menuitemhistory.FieldUpdatedBy)
	}
	if m.FieldCleared(menuitemhistory.FieldDescription) {
		fields = append(fields, menuitemhistory.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MenuItemHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MenuItemHistoryMutation) ClearField(name string) error {
	switch name {
	case menuitemhistory.FieldRef:
		m.ClearRef()
		return nil
	case menuitemhistory.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case menuitemhistory.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown MenuItemHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MenuItemHistoryMutation) ResetField(name string) error {
	switch name {
	case menuitemhistory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case menuitemhistory.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case menuitemhistory.FieldHistoryTime:
		m.ResetHistoryTime()
		return nil
	case menuitemhistory.FieldOperation:
		m.ResetOperation()
		return nil
	case menuitemhistory.FieldRef:
		m.ResetRef()
		return nil
	case menuitemhistory.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case menuitemhistory.FieldName:
		m.ResetName()
		return nil
	case menuitemhistory.FieldPrice:
		m.ResetPrice()
		return nil
	case menuitemhistory.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown MenuItemHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MenuItemHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MenuItemHistoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MenuItemHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MenuItemHistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MenuItemHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MenuItemHistoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MenuItemHistoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MenuItemHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MenuItemHistoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MenuItemHistory edge %s", name)
}
