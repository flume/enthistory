// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/uuidmixinid/ent/menuitemhistory"
	"_examples/uuidmixinid/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuItemHistoryUpdate is the builder for updating MenuItemHistory entities.
type MenuItemHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *MenuItemHistoryMutation
}

// Where appends a list predicates to the MenuItemHistoryUpdate builder.
func (_u *MenuItemHistoryUpdate) Where(ps ...predicate.MenuItemHistory) *MenuItemHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MenuItemHistoryUpdate) SetUpdatedAt(v time.Time) *MenuItemHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the MenuItemHistoryMutation object of the builder.
func (_u *MenuItemHistoryUpdate) Mutation() *MenuItemHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MenuItemHistoryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MenuItemHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MenuItemHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MenuItemHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MenuItemHistoryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := menuitemhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MenuItemHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(menuitemhistory.Table, menuitemhistory.Columns, sqlgraph.NewFieldSpec(menuitemhistory.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(menuitemhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(menuitemhistory.FieldRef, field.TypeUUID)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(menuitemhistory.FieldUpdatedBy, field.TypeUUID)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(menuitemhistory.FieldDescription, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menuitemhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MenuItemHistoryUpdateOne is the builder for updating a single MenuItemHistory entity.
type MenuItemHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuItemHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MenuItemHistoryUpdateOne) SetUpdatedAt(v time.Time) *MenuItemHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the MenuItemHistoryMutation object of the builder.
func (_u *MenuItemHistoryUpdateOne) Mutation() *MenuItemHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the MenuItemHistoryUpdate builder.
func (_u *MenuItemHistoryUpdateOne) Where(ps ...predicate.MenuItemHistory) *MenuItemHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MenuItemHistoryUpdateOne) Select(field string, fields ...string) *MenuItemHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated MenuItemHistory entity.
func (_u *MenuItemHistoryUpdateOne) Save(ctx context.Context) (*MenuItemHistory, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MenuItemHistoryUpdateOne) SaveX(ctx context.Context) *MenuItemHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MenuItemHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MenuItemHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MenuItemHistoryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := menuitemhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MenuItemHistoryUpdateOne) sqlSave(ctx context.Context) (_node *MenuItemHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(menuitemhistory.Table, menuitemhistory.Columns, sqlgraph.NewFieldSpec(menuitemhistory.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MenuItemHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menuitemhistory.FieldID)
		for _, f := range fields {
			if !menuitemhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menuitemhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(menuitemhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(menuitemhistory.FieldRef, field.TypeUUID)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(menuitemhistory.FieldUpdatedBy, field.TypeUUID)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(menuitemhistory.FieldDescription, field.TypeString)
	}
	_node = &MenuItemHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menuitemhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
