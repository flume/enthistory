// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/uuidmixinid/ent/menuitem"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// MenuItem is the model entity for the MenuItem schema.
type MenuItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Description holds the value of the "description" field.
	Description  string `json:"description,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MenuItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case menuitem.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case menuitem.FieldName, menuitem.FieldDescription:
			values[i] = new(sql.NullString)
		case menuitem.FieldCreatedAt, menuitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case menuitem.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MenuItem fields.
func (mi *MenuItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case menuitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mi.ID = *value
			}
		case menuitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mi.CreatedAt = value.Time
			}
		case menuitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mi.UpdatedAt = value.Time
			}
		case menuitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mi.Name = value.String
			}
		case menuitem.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				mi.Price = value.Float64
			}
		case menuitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				mi.Description = value.String
			}
		default:
			mi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MenuItem.
// This includes values selected through modifiers, order, etc.
func (mi *MenuItem) Value(name string) (ent.Value, error) {
	return mi.selectValues.Get(name)
}

// Update returns a builder for updating this MenuItem.
// Note that you need to call MenuItem.Unwrap() before calling this method if this MenuItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (mi *MenuItem) Update() *MenuItemUpdateOne {
	return NewMenuItemClient(mi.config).UpdateOne(mi)
}

// Unwrap unwraps the MenuItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mi *MenuItem) Unwrap() *MenuItem {
	_tx, ok := mi.config.driver.(*txDriver)
	if !ok {
		panic("ent: MenuItem is not a transactional entity")
	}
	mi.config.driver = _tx.drv
	return mi
}

// String implements the fmt.Stringer.
func (mi *MenuItem) String() string {
	var builder strings.Builder
	builder.WriteString("MenuItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mi.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(mi.Name)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", mi.Price))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(mi.Description)
	builder.WriteByte(')')
	return builder.String()
}

// MenuItems is a parsable slice of MenuItem.
type MenuItems []*MenuItem
