// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/uuidmixinid/ent/menuitemhistory"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"github.com/flume/enthistory"
)

// MenuItemHistory is the model entity for the MenuItemHistory schema.
type MenuItemHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref uuid.UUID `json:"ref,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy *uuid.UUID `json:"updated_by,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Description holds the value of the "description" field.
	Description  string `json:"description,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MenuItemHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case menuitemhistory.FieldUpdatedBy:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case menuitemhistory.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case menuitemhistory.FieldOperation, menuitemhistory.FieldName, menuitemhistory.FieldDescription:
			values[i] = new(sql.NullString)
		case menuitemhistory.FieldCreatedAt, menuitemhistory.FieldUpdatedAt, menuitemhistory.FieldHistoryTime:
			values[i] = new(sql.NullTime)
		case menuitemhistory.FieldID, menuitemhistory.FieldRef:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MenuItemHistory fields.
func (mih *MenuItemHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case menuitemhistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mih.ID = *value
			}
		case menuitemhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mih.CreatedAt = value.Time
			}
		case menuitemhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mih.UpdatedAt = value.Time
			}
		case menuitemhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				mih.HistoryTime = value.Time
			}
		case menuitemhistory.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				mih.Operation = enthistory.OpType(value.String)
			}
		case menuitemhistory.FieldRef:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value != nil {
				mih.Ref = *value
			}
		case menuitemhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mih.UpdatedBy = new(uuid.UUID)
				*mih.UpdatedBy = *value.S.(*uuid.UUID)
			}
		case menuitemhistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mih.Name = value.String
			}
		case menuitemhistory.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				mih.Price = value.Float64
			}
		case menuitemhistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				mih.Description = value.String
			}
		default:
			mih.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MenuItemHistory.
// This includes values selected through modifiers, order, etc.
func (mih *MenuItemHistory) Value(name string) (ent.Value, error) {
	return mih.selectValues.Get(name)
}

// Update returns a builder for updating this MenuItemHistory.
// Note that you need to call MenuItemHistory.Unwrap() before calling this method if this MenuItemHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (mih *MenuItemHistory) Update() *MenuItemHistoryUpdateOne {
	return NewMenuItemHistoryClient(mih.config).UpdateOne(mih)
}

// Unwrap unwraps the MenuItemHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mih *MenuItemHistory) Unwrap() *MenuItemHistory {
	_tx, ok := mih.config.driver.(*txDriver)
	if !ok {
		panic("ent: MenuItemHistory is not a transactional entity")
	}
	mih.config.driver = _tx.drv
	return mih
}

// String implements the fmt.Stringer.
func (mih *MenuItemHistory) String() string {
	var builder strings.Builder
	builder.WriteString("MenuItemHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mih.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mih.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mih.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("history_time=")
	builder.WriteString(mih.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", mih.Operation))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(fmt.Sprintf("%v", mih.Ref))
	builder.WriteString(", ")
	if v := mih.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(mih.Name)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", mih.Price))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(mih.Description)
	builder.WriteByte(')')
	return builder.String()
}

// MenuItemHistories is a parsable slice of MenuItemHistory.
type MenuItemHistories []*MenuItemHistory
