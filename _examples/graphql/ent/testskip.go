// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/graphql/ent/testskip"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TestSkip is the model entity for the TestSkip schema.
type TestSkip struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// OtherID holds the value of the "other_id" field.
	OtherID uuid.UUID `json:"other_id,omitempty"`
	// Name holds the value of the "name" field.
	Name         string `json:"name,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestSkip) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testskip.FieldName:
			values[i] = new(sql.NullString)
		case testskip.FieldID, testskip.FieldOtherID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestSkip fields.
func (ts *TestSkip) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testskip.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ts.ID = *value
			}
		case testskip.FieldOtherID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field other_id", values[i])
			} else if value != nil {
				ts.OtherID = *value
			}
		case testskip.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ts.Name = value.String
			}
		default:
			ts.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestSkip.
// This includes values selected through modifiers, order, etc.
func (ts *TestSkip) Value(name string) (ent.Value, error) {
	return ts.selectValues.Get(name)
}

// Update returns a builder for updating this TestSkip.
// Note that you need to call TestSkip.Unwrap() before calling this method if this TestSkip
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TestSkip) Update() *TestSkipUpdateOne {
	return NewTestSkipClient(ts.config).UpdateOne(ts)
}

// Unwrap unwraps the TestSkip entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ts *TestSkip) Unwrap() *TestSkip {
	_tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestSkip is not a transactional entity")
	}
	ts.config.driver = _tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TestSkip) String() string {
	var builder strings.Builder
	builder.WriteString("TestSkip(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ts.ID))
	builder.WriteString("other_id=")
	builder.WriteString(fmt.Sprintf("%v", ts.OtherID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ts.Name)
	builder.WriteByte(')')
	return builder.String()
}

// TestSkips is a parsable slice of TestSkip.
type TestSkips []*TestSkip
