// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"

	"github.com/flume/enthistory"
)

// CreateTodoInput represents a mutation input for creating todos.
type CreateTodoInput struct {
	OtherID *uuid.UUID
	Name    string
}

// Mutate applies the CreateTodoInput on the TodoMutation builder.
func (i *CreateTodoInput) Mutate(m *TodoMutation) {
	if v := i.OtherID; v != nil {
		m.SetOtherID(*v)
	}
	m.SetName(i.Name)
}

// SetInput applies the change-set in the CreateTodoInput on the TodoCreate builder.
func (c *TodoCreate) SetInput(i CreateTodoInput) *TodoCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTodoInput represents a mutation input for updating todos.
type UpdateTodoInput struct {
	ClearOtherID bool
	OtherID      *uuid.UUID
	Name         *string
}

// Mutate applies the UpdateTodoInput on the TodoMutation builder.
func (i *UpdateTodoInput) Mutate(m *TodoMutation) {
	if i.ClearOtherID {
		m.ClearOtherID()
	}
	if v := i.OtherID; v != nil {
		m.SetOtherID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateTodoInput on the TodoUpdate builder.
func (c *TodoUpdate) SetInput(i UpdateTodoInput) *TodoUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTodoInput on the TodoUpdateOne builder.
func (c *TodoUpdateOne) SetInput(i UpdateTodoInput) *TodoUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTodoHistoryInput represents a mutation input for creating todohistories.
type CreateTodoHistoryInput struct {
	HistoryTime *time.Time
	Operation   enthistory.OpType
	Ref         *uuid.UUID
	UpdatedBy   *uuid.UUID
	OtherID     *uuid.UUID
	Name        string
}

// Mutate applies the CreateTodoHistoryInput on the TodoHistoryMutation builder.
func (i *CreateTodoHistoryInput) Mutate(m *TodoHistoryMutation) {
	if v := i.HistoryTime; v != nil {
		m.SetHistoryTime(*v)
	}
	m.SetOperation(i.Operation)
	if v := i.Ref; v != nil {
		m.SetRef(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.OtherID; v != nil {
		m.SetOtherID(*v)
	}
	m.SetName(i.Name)
}

// SetInput applies the change-set in the CreateTodoHistoryInput on the TodoHistoryCreate builder.
func (c *TodoHistoryCreate) SetInput(i CreateTodoHistoryInput) *TodoHistoryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTodoHistoryInput represents a mutation input for updating todohistories.
type UpdateTodoHistoryInput struct {
	ClearOtherID bool
	OtherID      *uuid.UUID
	Name         *string
}

// Mutate applies the UpdateTodoHistoryInput on the TodoHistoryMutation builder.
func (i *UpdateTodoHistoryInput) Mutate(m *TodoHistoryMutation) {
	if i.ClearOtherID {
		m.ClearOtherID()
	}
	if v := i.OtherID; v != nil {
		m.SetOtherID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateTodoHistoryInput on the TodoHistoryUpdate builder.
func (c *TodoHistoryUpdate) SetInput(i UpdateTodoHistoryInput) *TodoHistoryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTodoHistoryInput on the TodoHistoryUpdateOne builder.
func (c *TodoHistoryUpdateOne) SetInput(i UpdateTodoHistoryInput) *TodoHistoryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
