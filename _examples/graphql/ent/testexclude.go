// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/graphql/ent/testexclude"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TestExclude is the model entity for the TestExclude schema.
type TestExclude struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// OtherID holds the value of the "other_id" field.
	OtherID uuid.UUID `json:"other_id,omitempty"`
	// Name holds the value of the "name" field.
	Name         string `json:"name,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestExclude) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testexclude.FieldName:
			values[i] = new(sql.NullString)
		case testexclude.FieldID, testexclude.FieldOtherID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestExclude fields.
func (te *TestExclude) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testexclude.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				te.ID = *value
			}
		case testexclude.FieldOtherID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field other_id", values[i])
			} else if value != nil {
				te.OtherID = *value
			}
		case testexclude.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				te.Name = value.String
			}
		default:
			te.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestExclude.
// This includes values selected through modifiers, order, etc.
func (te *TestExclude) Value(name string) (ent.Value, error) {
	return te.selectValues.Get(name)
}

// Update returns a builder for updating this TestExclude.
// Note that you need to call TestExclude.Unwrap() before calling this method if this TestExclude
// was returned from a transaction, and the transaction was committed or rolled back.
func (te *TestExclude) Update() *TestExcludeUpdateOne {
	return NewTestExcludeClient(te.config).UpdateOne(te)
}

// Unwrap unwraps the TestExclude entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (te *TestExclude) Unwrap() *TestExclude {
	_tx, ok := te.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestExclude is not a transactional entity")
	}
	te.config.driver = _tx.drv
	return te
}

// String implements the fmt.Stringer.
func (te *TestExclude) String() string {
	var builder strings.Builder
	builder.WriteString("TestExclude(")
	builder.WriteString(fmt.Sprintf("id=%v, ", te.ID))
	builder.WriteString("other_id=")
	builder.WriteString(fmt.Sprintf("%v", te.OtherID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(te.Name)
	builder.WriteByte(')')
	return builder.String()
}

// TestExcludes is a parsable slice of TestExclude.
type TestExcludes []*TestExclude
