// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/graphql/ent/todohistory"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/flume/enthistory"
)

// TodoHistoryCreate is the builder for creating a TodoHistory entity.
type TodoHistoryCreate struct {
	config
	mutation *TodoHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (thc *TodoHistoryCreate) SetHistoryTime(t time.Time) *TodoHistoryCreate {
	thc.mutation.SetHistoryTime(t)
	return thc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (thc *TodoHistoryCreate) SetNillableHistoryTime(t *time.Time) *TodoHistoryCreate {
	if t != nil {
		thc.SetHistoryTime(*t)
	}
	return thc
}

// SetOperation sets the "operation" field.
func (thc *TodoHistoryCreate) SetOperation(et enthistory.OpType) *TodoHistoryCreate {
	thc.mutation.SetOperation(et)
	return thc
}

// SetRef sets the "ref" field.
func (thc *TodoHistoryCreate) SetRef(u uuid.UUID) *TodoHistoryCreate {
	thc.mutation.SetRef(u)
	return thc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (thc *TodoHistoryCreate) SetNillableRef(u *uuid.UUID) *TodoHistoryCreate {
	if u != nil {
		thc.SetRef(*u)
	}
	return thc
}

// SetUpdatedBy sets the "updated_by" field.
func (thc *TodoHistoryCreate) SetUpdatedBy(u uuid.UUID) *TodoHistoryCreate {
	thc.mutation.SetUpdatedBy(u)
	return thc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (thc *TodoHistoryCreate) SetNillableUpdatedBy(u *uuid.UUID) *TodoHistoryCreate {
	if u != nil {
		thc.SetUpdatedBy(*u)
	}
	return thc
}

// SetOtherID sets the "other_id" field.
func (thc *TodoHistoryCreate) SetOtherID(u uuid.UUID) *TodoHistoryCreate {
	thc.mutation.SetOtherID(u)
	return thc
}

// SetNillableOtherID sets the "other_id" field if the given value is not nil.
func (thc *TodoHistoryCreate) SetNillableOtherID(u *uuid.UUID) *TodoHistoryCreate {
	if u != nil {
		thc.SetOtherID(*u)
	}
	return thc
}

// SetName sets the "name" field.
func (thc *TodoHistoryCreate) SetName(s string) *TodoHistoryCreate {
	thc.mutation.SetName(s)
	return thc
}

// SetID sets the "id" field.
func (thc *TodoHistoryCreate) SetID(u uuid.UUID) *TodoHistoryCreate {
	thc.mutation.SetID(u)
	return thc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (thc *TodoHistoryCreate) SetNillableID(u *uuid.UUID) *TodoHistoryCreate {
	if u != nil {
		thc.SetID(*u)
	}
	return thc
}

// Mutation returns the TodoHistoryMutation object of the builder.
func (thc *TodoHistoryCreate) Mutation() *TodoHistoryMutation {
	return thc.mutation
}

// Save creates the TodoHistory in the database.
func (thc *TodoHistoryCreate) Save(ctx context.Context) (*TodoHistory, error) {
	thc.defaults()
	return withHooks(ctx, thc.sqlSave, thc.mutation, thc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (thc *TodoHistoryCreate) SaveX(ctx context.Context) *TodoHistory {
	v, err := thc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thc *TodoHistoryCreate) Exec(ctx context.Context) error {
	_, err := thc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thc *TodoHistoryCreate) ExecX(ctx context.Context) {
	if err := thc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thc *TodoHistoryCreate) defaults() {
	if _, ok := thc.mutation.HistoryTime(); !ok {
		v := todohistory.DefaultHistoryTime()
		thc.mutation.SetHistoryTime(v)
	}
	if _, ok := thc.mutation.ID(); !ok {
		v := todohistory.DefaultID()
		thc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thc *TodoHistoryCreate) check() error {
	if _, ok := thc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`ent: missing required field "TodoHistory.history_time"`)}
	}
	if _, ok := thc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "TodoHistory.operation"`)}
	}
	if v, ok := thc.mutation.Operation(); ok {
		if err := todohistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "TodoHistory.operation": %w`, err)}
		}
	}
	if _, ok := thc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TodoHistory.name"`)}
	}
	if v, ok := thc.mutation.Name(); ok {
		if err := todohistory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TodoHistory.name": %w`, err)}
		}
	}
	return nil
}

func (thc *TodoHistoryCreate) sqlSave(ctx context.Context) (*TodoHistory, error) {
	if err := thc.check(); err != nil {
		return nil, err
	}
	_node, _spec := thc.createSpec()
	if err := sqlgraph.CreateNode(ctx, thc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	thc.mutation.id = &_node.ID
	thc.mutation.done = true
	return _node, nil
}

func (thc *TodoHistoryCreate) createSpec() (*TodoHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &TodoHistory{config: thc.config}
		_spec = sqlgraph.NewCreateSpec(todohistory.Table, sqlgraph.NewFieldSpec(todohistory.FieldID, field.TypeUUID))
	)
	if id, ok := thc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := thc.mutation.HistoryTime(); ok {
		_spec.SetField(todohistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := thc.mutation.Operation(); ok {
		_spec.SetField(todohistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := thc.mutation.Ref(); ok {
		_spec.SetField(todohistory.FieldRef, field.TypeUUID, value)
		_node.Ref = value
	}
	if value, ok := thc.mutation.UpdatedBy(); ok {
		_spec.SetField(todohistory.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = &value
	}
	if value, ok := thc.mutation.OtherID(); ok {
		_spec.SetField(todohistory.FieldOtherID, field.TypeUUID, value)
		_node.OtherID = value
	}
	if value, ok := thc.mutation.Name(); ok {
		_spec.SetField(todohistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// TodoHistoryCreateBulk is the builder for creating many TodoHistory entities in bulk.
type TodoHistoryCreateBulk struct {
	config
	err      error
	builders []*TodoHistoryCreate
}

// Save creates the TodoHistory entities in the database.
func (thcb *TodoHistoryCreateBulk) Save(ctx context.Context) ([]*TodoHistory, error) {
	if thcb.err != nil {
		return nil, thcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(thcb.builders))
	nodes := make([]*TodoHistory, len(thcb.builders))
	mutators := make([]Mutator, len(thcb.builders))
	for i := range thcb.builders {
		func(i int, root context.Context) {
			builder := thcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TodoHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, thcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, thcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, thcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (thcb *TodoHistoryCreateBulk) SaveX(ctx context.Context) []*TodoHistory {
	v, err := thcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thcb *TodoHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := thcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thcb *TodoHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := thcb.Exec(ctx); err != nil {
		panic(err)
	}
}
