// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/graphql/ent/testskiphistory"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"github.com/flume/enthistory"
)

// TestSkipHistoryCreate is the builder for creating a TestSkipHistory entity.
type TestSkipHistoryCreate struct {
	config
	mutation *TestSkipHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (_c *TestSkipHistoryCreate) SetHistoryTime(v time.Time) *TestSkipHistoryCreate {
	_c.mutation.SetHistoryTime(v)
	return _c
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (_c *TestSkipHistoryCreate) SetNillableHistoryTime(v *time.Time) *TestSkipHistoryCreate {
	if v != nil {
		_c.SetHistoryTime(*v)
	}
	return _c
}

// SetOperation sets the "operation" field.
func (_c *TestSkipHistoryCreate) SetOperation(v enthistory.OpType) *TestSkipHistoryCreate {
	_c.mutation.SetOperation(v)
	return _c
}

// SetRef sets the "ref" field.
func (_c *TestSkipHistoryCreate) SetRef(v uuid.UUID) *TestSkipHistoryCreate {
	_c.mutation.SetRef(v)
	return _c
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (_c *TestSkipHistoryCreate) SetNillableRef(v *uuid.UUID) *TestSkipHistoryCreate {
	if v != nil {
		_c.SetRef(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *TestSkipHistoryCreate) SetUpdatedBy(v uuid.UUID) *TestSkipHistoryCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *TestSkipHistoryCreate) SetNillableUpdatedBy(v *uuid.UUID) *TestSkipHistoryCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetOtherID sets the "other_id" field.
func (_c *TestSkipHistoryCreate) SetOtherID(v uuid.UUID) *TestSkipHistoryCreate {
	_c.mutation.SetOtherID(v)
	return _c
}

// SetNillableOtherID sets the "other_id" field if the given value is not nil.
func (_c *TestSkipHistoryCreate) SetNillableOtherID(v *uuid.UUID) *TestSkipHistoryCreate {
	if v != nil {
		_c.SetOtherID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *TestSkipHistoryCreate) SetName(v string) *TestSkipHistoryCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetID sets the "id" field.
func (_c *TestSkipHistoryCreate) SetID(v uuid.UUID) *TestSkipHistoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *TestSkipHistoryCreate) SetNillableID(v *uuid.UUID) *TestSkipHistoryCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the TestSkipHistoryMutation object of the builder.
func (_c *TestSkipHistoryCreate) Mutation() *TestSkipHistoryMutation {
	return _c.mutation
}

// Save creates the TestSkipHistory in the database.
func (_c *TestSkipHistoryCreate) Save(ctx context.Context) (*TestSkipHistory, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TestSkipHistoryCreate) SaveX(ctx context.Context) *TestSkipHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TestSkipHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TestSkipHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TestSkipHistoryCreate) defaults() {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		v := testskiphistory.DefaultHistoryTime()
		_c.mutation.SetHistoryTime(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := testskiphistory.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TestSkipHistoryCreate) check() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`ent: missing required field "TestSkipHistory.history_time"`)}
	}
	if _, ok := _c.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "TestSkipHistory.operation"`)}
	}
	if v, ok := _c.mutation.Operation(); ok {
		if err := testskiphistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "TestSkipHistory.operation": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TestSkipHistory.name"`)}
	}
	return nil
}

func (_c *TestSkipHistoryCreate) sqlSave(ctx context.Context) (*TestSkipHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TestSkipHistoryCreate) createSpec() (*TestSkipHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &TestSkipHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(testskiphistory.Table, sqlgraph.NewFieldSpec(testskiphistory.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.HistoryTime(); ok {
		_spec.SetField(testskiphistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := _c.mutation.Operation(); ok {
		_spec.SetField(testskiphistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := _c.mutation.Ref(); ok {
		_spec.SetField(testskiphistory.FieldRef, field.TypeUUID, value)
		_node.Ref = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(testskiphistory.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = &value
	}
	if value, ok := _c.mutation.OtherID(); ok {
		_spec.SetField(testskiphistory.FieldOtherID, field.TypeUUID, value)
		_node.OtherID = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(testskiphistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// TestSkipHistoryCreateBulk is the builder for creating many TestSkipHistory entities in bulk.
type TestSkipHistoryCreateBulk struct {
	config
	err      error
	builders []*TestSkipHistoryCreate
}

// Save creates the TestSkipHistory entities in the database.
func (_c *TestSkipHistoryCreateBulk) Save(ctx context.Context) ([]*TestSkipHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TestSkipHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestSkipHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TestSkipHistoryCreateBulk) SaveX(ctx context.Context) []*TestSkipHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TestSkipHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TestSkipHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
