// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/graphql/ent/testexclude"
	"_examples/graphql/ent/testskip"
	"_examples/graphql/ent/testskiphistory"
	"_examples/graphql/ent/todo"
	"_examples/graphql/ent/todohistory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 5)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   testexclude.Table,
			Columns: testexclude.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testexclude.FieldID,
			},
		},
		Type: "TestExclude",
		Fields: map[string]*sqlgraph.FieldSpec{
			testexclude.FieldOtherID: {Type: field.TypeUUID, Column: testexclude.FieldOtherID},
			testexclude.FieldName:    {Type: field.TypeString, Column: testexclude.FieldName},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   testskip.Table,
			Columns: testskip.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testskip.FieldID,
			},
		},
		Type: "TestSkip",
		Fields: map[string]*sqlgraph.FieldSpec{
			testskip.FieldOtherID: {Type: field.TypeUUID, Column: testskip.FieldOtherID},
			testskip.FieldName:    {Type: field.TypeString, Column: testskip.FieldName},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   testskiphistory.Table,
			Columns: testskiphistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testskiphistory.FieldID,
			},
		},
		Type: "TestSkipHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			testskiphistory.FieldHistoryTime: {Type: field.TypeTime, Column: testskiphistory.FieldHistoryTime},
			testskiphistory.FieldOperation:   {Type: field.TypeEnum, Column: testskiphistory.FieldOperation},
			testskiphistory.FieldRef:         {Type: field.TypeUUID, Column: testskiphistory.FieldRef},
			testskiphistory.FieldUpdatedBy:   {Type: field.TypeUUID, Column: testskiphistory.FieldUpdatedBy},
			testskiphistory.FieldOtherID:     {Type: field.TypeUUID, Column: testskiphistory.FieldOtherID},
			testskiphistory.FieldName:        {Type: field.TypeString, Column: testskiphistory.FieldName},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   todo.Table,
			Columns: todo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: todo.FieldID,
			},
		},
		Type: "Todo",
		Fields: map[string]*sqlgraph.FieldSpec{
			todo.FieldOtherID: {Type: field.TypeUUID, Column: todo.FieldOtherID},
			todo.FieldName:    {Type: field.TypeString, Column: todo.FieldName},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   todohistory.Table,
			Columns: todohistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: todohistory.FieldID,
			},
		},
		Type: "TodoHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			todohistory.FieldHistoryTime: {Type: field.TypeTime, Column: todohistory.FieldHistoryTime},
			todohistory.FieldOperation:   {Type: field.TypeEnum, Column: todohistory.FieldOperation},
			todohistory.FieldRef:         {Type: field.TypeUUID, Column: todohistory.FieldRef},
			todohistory.FieldUpdatedBy:   {Type: field.TypeUUID, Column: todohistory.FieldUpdatedBy},
			todohistory.FieldOtherID:     {Type: field.TypeUUID, Column: todohistory.FieldOtherID},
			todohistory.FieldName:        {Type: field.TypeString, Column: todohistory.FieldName},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (teq *TestExcludeQuery) addPredicate(pred func(s *sql.Selector)) {
	teq.predicates = append(teq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TestExcludeQuery builder.
func (teq *TestExcludeQuery) Filter() *TestExcludeFilter {
	return &TestExcludeFilter{config: teq.config, predicateAdder: teq}
}

// addPredicate implements the predicateAdder interface.
func (m *TestExcludeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TestExcludeMutation builder.
func (m *TestExcludeMutation) Filter() *TestExcludeFilter {
	return &TestExcludeFilter{config: m.config, predicateAdder: m}
}

// TestExcludeFilter provides a generic filtering capability at runtime for TestExcludeQuery.
type TestExcludeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TestExcludeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TestExcludeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(testexclude.FieldID))
}

// WhereOtherID applies the entql [16]byte predicate on the other_id field.
func (f *TestExcludeFilter) WhereOtherID(p entql.ValueP) {
	f.Where(p.Field(testexclude.FieldOtherID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TestExcludeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(testexclude.FieldName))
}

// addPredicate implements the predicateAdder interface.
func (tsq *TestSkipQuery) addPredicate(pred func(s *sql.Selector)) {
	tsq.predicates = append(tsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TestSkipQuery builder.
func (tsq *TestSkipQuery) Filter() *TestSkipFilter {
	return &TestSkipFilter{config: tsq.config, predicateAdder: tsq}
}

// addPredicate implements the predicateAdder interface.
func (m *TestSkipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TestSkipMutation builder.
func (m *TestSkipMutation) Filter() *TestSkipFilter {
	return &TestSkipFilter{config: m.config, predicateAdder: m}
}

// TestSkipFilter provides a generic filtering capability at runtime for TestSkipQuery.
type TestSkipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TestSkipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TestSkipFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(testskip.FieldID))
}

// WhereOtherID applies the entql [16]byte predicate on the other_id field.
func (f *TestSkipFilter) WhereOtherID(p entql.ValueP) {
	f.Where(p.Field(testskip.FieldOtherID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TestSkipFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(testskip.FieldName))
}

// addPredicate implements the predicateAdder interface.
func (tshq *TestSkipHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	tshq.predicates = append(tshq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TestSkipHistoryQuery builder.
func (tshq *TestSkipHistoryQuery) Filter() *TestSkipHistoryFilter {
	return &TestSkipHistoryFilter{config: tshq.config, predicateAdder: tshq}
}

// addPredicate implements the predicateAdder interface.
func (m *TestSkipHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TestSkipHistoryMutation builder.
func (m *TestSkipHistoryMutation) Filter() *TestSkipHistoryFilter {
	return &TestSkipHistoryFilter{config: m.config, predicateAdder: m}
}

// TestSkipHistoryFilter provides a generic filtering capability at runtime for TestSkipHistoryQuery.
type TestSkipHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TestSkipHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TestSkipHistoryFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(testskiphistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *TestSkipHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(testskiphistory.FieldHistoryTime))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *TestSkipHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(testskiphistory.FieldOperation))
}

// WhereRef applies the entql [16]byte predicate on the ref field.
func (f *TestSkipHistoryFilter) WhereRef(p entql.ValueP) {
	f.Where(p.Field(testskiphistory.FieldRef))
}

// WhereUpdatedBy applies the entql [16]byte predicate on the updated_by field.
func (f *TestSkipHistoryFilter) WhereUpdatedBy(p entql.ValueP) {
	f.Where(p.Field(testskiphistory.FieldUpdatedBy))
}

// WhereOtherID applies the entql [16]byte predicate on the other_id field.
func (f *TestSkipHistoryFilter) WhereOtherID(p entql.ValueP) {
	f.Where(p.Field(testskiphistory.FieldOtherID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TestSkipHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(testskiphistory.FieldName))
}

// addPredicate implements the predicateAdder interface.
func (tq *TodoQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TodoQuery builder.
func (tq *TodoQuery) Filter() *TodoFilter {
	return &TodoFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TodoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TodoMutation builder.
func (m *TodoMutation) Filter() *TodoFilter {
	return &TodoFilter{config: m.config, predicateAdder: m}
}

// TodoFilter provides a generic filtering capability at runtime for TodoQuery.
type TodoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TodoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TodoFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(todo.FieldID))
}

// WhereOtherID applies the entql [16]byte predicate on the other_id field.
func (f *TodoFilter) WhereOtherID(p entql.ValueP) {
	f.Where(p.Field(todo.FieldOtherID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TodoFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(todo.FieldName))
}

// addPredicate implements the predicateAdder interface.
func (thq *TodoHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	thq.predicates = append(thq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TodoHistoryQuery builder.
func (thq *TodoHistoryQuery) Filter() *TodoHistoryFilter {
	return &TodoHistoryFilter{config: thq.config, predicateAdder: thq}
}

// addPredicate implements the predicateAdder interface.
func (m *TodoHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TodoHistoryMutation builder.
func (m *TodoHistoryMutation) Filter() *TodoHistoryFilter {
	return &TodoHistoryFilter{config: m.config, predicateAdder: m}
}

// TodoHistoryFilter provides a generic filtering capability at runtime for TodoHistoryQuery.
type TodoHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TodoHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TodoHistoryFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(todohistory.FieldID))
}

// WhereHistoryTime applies the entql time.Time predicate on the history_time field.
func (f *TodoHistoryFilter) WhereHistoryTime(p entql.TimeP) {
	f.Where(p.Field(todohistory.FieldHistoryTime))
}

// WhereOperation applies the entql string predicate on the operation field.
func (f *TodoHistoryFilter) WhereOperation(p entql.StringP) {
	f.Where(p.Field(todohistory.FieldOperation))
}

// WhereRef applies the entql [16]byte predicate on the ref field.
func (f *TodoHistoryFilter) WhereRef(p entql.ValueP) {
	f.Where(p.Field(todohistory.FieldRef))
}

// WhereUpdatedBy applies the entql [16]byte predicate on the updated_by field.
func (f *TodoHistoryFilter) WhereUpdatedBy(p entql.ValueP) {
	f.Where(p.Field(todohistory.FieldUpdatedBy))
}

// WhereOtherID applies the entql [16]byte predicate on the other_id field.
func (f *TodoHistoryFilter) WhereOtherID(p entql.ValueP) {
	f.Where(p.Field(todohistory.FieldOtherID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TodoHistoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(todohistory.FieldName))
}
