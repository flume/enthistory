// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_examples/graphql/ent/todohistory"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"github.com/flume/enthistory"
)

// TodoHistory is the model entity for the TodoHistory schema.
type TodoHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref uuid.UUID `json:"ref,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy *uuid.UUID `json:"updated_by,omitempty"`
	// OtherID holds the value of the "other_id" field.
	OtherID uuid.UUID `json:"other_id,omitempty"`
	// Name holds the value of the "name" field.
	Name         string `json:"name,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TodoHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case todohistory.FieldUpdatedBy:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case todohistory.FieldOperation, todohistory.FieldName:
			values[i] = new(sql.NullString)
		case todohistory.FieldHistoryTime:
			values[i] = new(sql.NullTime)
		case todohistory.FieldID, todohistory.FieldRef, todohistory.FieldOtherID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TodoHistory fields.
func (th *TodoHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case todohistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				th.ID = *value
			}
		case todohistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				th.HistoryTime = value.Time
			}
		case todohistory.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				th.Operation = enthistory.OpType(value.String)
			}
		case todohistory.FieldRef:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value != nil {
				th.Ref = *value
			}
		case todohistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				th.UpdatedBy = new(uuid.UUID)
				*th.UpdatedBy = *value.S.(*uuid.UUID)
			}
		case todohistory.FieldOtherID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field other_id", values[i])
			} else if value != nil {
				th.OtherID = *value
			}
		case todohistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				th.Name = value.String
			}
		default:
			th.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TodoHistory.
// This includes values selected through modifiers, order, etc.
func (th *TodoHistory) Value(name string) (ent.Value, error) {
	return th.selectValues.Get(name)
}

// Update returns a builder for updating this TodoHistory.
// Note that you need to call TodoHistory.Unwrap() before calling this method if this TodoHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (th *TodoHistory) Update() *TodoHistoryUpdateOne {
	return NewTodoHistoryClient(th.config).UpdateOne(th)
}

// Unwrap unwraps the TodoHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (th *TodoHistory) Unwrap() *TodoHistory {
	_tx, ok := th.config.driver.(*txDriver)
	if !ok {
		panic("ent: TodoHistory is not a transactional entity")
	}
	th.config.driver = _tx.drv
	return th
}

// String implements the fmt.Stringer.
func (th *TodoHistory) String() string {
	var builder strings.Builder
	builder.WriteString("TodoHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", th.ID))
	builder.WriteString("history_time=")
	builder.WriteString(th.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", th.Operation))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(fmt.Sprintf("%v", th.Ref))
	builder.WriteString(", ")
	if v := th.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("other_id=")
	builder.WriteString(fmt.Sprintf("%v", th.OtherID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(th.Name)
	builder.WriteByte(')')
	return builder.String()
}

// TodoHistories is a parsable slice of TodoHistory.
type TodoHistories []*TodoHistory
