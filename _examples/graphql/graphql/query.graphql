directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateTodoInput is used for create Todo object.
Input was generated by ent.
"""
input CreateTodoInput {
  otherID: ID
  name: String!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "_examples/graphql/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  todos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Todos returned from the connection.
    """
    orderBy: TodoOrder

    """
    Filtering options for Todos returned from the connection.
    """
    where: TodoWhereInput
  ): TodoConnection!
  todoHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TodoHistories returned from the connection.
    """
    orderBy: TodoHistoryOrder

    """
    Filtering options for TodoHistories returned from the connection.
    """
    where: TodoHistoryWhereInput
  ): TodoHistoryConnection!
}
type TestExclude implements Node {
  id: ID!
  otherID: ID
  name: String!
}
"""
Ordering options for TestExclude connections
"""
input TestExcludeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TestExcludes.
  """
  field: TestExcludeOrderField!
}
"""
Properties by which TestExclude connections can be ordered.
"""
enum TestExcludeOrderField {
  NAME
}
"""
TestExcludeWhereInput is used for filtering TestExclude objects.
Input was generated by ent.
"""
input TestExcludeWhereInput {
  not: TestExcludeWhereInput
  and: [TestExcludeWhereInput!]
  or: [TestExcludeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  other_id field predicates
  """
  otherID: ID
  otherIDNEQ: ID
  otherIDIn: [ID!]
  otherIDNotIn: [ID!]
  otherIDGT: ID
  otherIDGTE: ID
  otherIDLT: ID
  otherIDLTE: ID
  otherIDIsNil: Boolean
  otherIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
The builtin Time type
"""
scalar Time
type Todo implements Node {
  id: ID!
  otherID: ID
  name: String!
}
"""
A connection to a list of items.
"""
type TodoConnection {
  """
  A list of edges.
  """
  edges: [TodoEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TodoEdge {
  """
  The item at the end of the edge.
  """
  node: Todo
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type TodoHistory implements Node {
  id: ID!
  historyTime: Time!
  operation: TodoHistoryOpType!
  ref: ID
  updatedBy: ID
  otherID: ID
  name: String!
}
"""
A connection to a list of items.
"""
type TodoHistoryConnection {
  """
  A list of edges.
  """
  edges: [TodoHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TodoHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: TodoHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TodoHistoryOpType is enum for the field operation
"""
enum TodoHistoryOpType @goModel(model: "github.com/flume/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}
"""
Ordering options for TodoHistory connections
"""
input TodoHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TodoHistories.
  """
  field: TodoHistoryOrderField!
}
"""
Properties by which TodoHistory connections can be ordered.
"""
enum TodoHistoryOrderField {
  NAME
}
"""
TodoHistoryWhereInput is used for filtering TodoHistory objects.
Input was generated by ent.
"""
input TodoHistoryWhereInput {
  not: TodoHistoryWhereInput
  and: [TodoHistoryWhereInput!]
  or: [TodoHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  history_time field predicates
  """
  historyTime: Time
  historyTimeNEQ: Time
  historyTimeIn: [Time!]
  historyTimeNotIn: [Time!]
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeLT: Time
  historyTimeLTE: Time
  """
  operation field predicates
  """
  operation: TodoHistoryOpType
  operationNEQ: TodoHistoryOpType
  operationIn: [TodoHistoryOpType!]
  operationNotIn: [TodoHistoryOpType!]
  """
  ref field predicates
  """
  ref: ID
  refNEQ: ID
  refIn: [ID!]
  refNotIn: [ID!]
  refGT: ID
  refGTE: ID
  refLT: ID
  refLTE: ID
  refIsNil: Boolean
  refNotNil: Boolean
  """
  updated_by field predicates
  """
  updatedBy: ID
  updatedByNEQ: ID
  updatedByIn: [ID!]
  updatedByNotIn: [ID!]
  updatedByGT: ID
  updatedByGTE: ID
  updatedByLT: ID
  updatedByLTE: ID
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  other_id field predicates
  """
  otherID: ID
  otherIDNEQ: ID
  otherIDIn: [ID!]
  otherIDNotIn: [ID!]
  otherIDGT: ID
  otherIDGTE: ID
  otherIDLT: ID
  otherIDLTE: ID
  otherIDIsNil: Boolean
  otherIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
Ordering options for Todo connections
"""
input TodoOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Todos.
  """
  field: TodoOrderField!
}
"""
Properties by which Todo connections can be ordered.
"""
enum TodoOrderField {
  NAME
}
"""
TodoWhereInput is used for filtering Todo objects.
Input was generated by ent.
"""
input TodoWhereInput {
  not: TodoWhereInput
  and: [TodoWhereInput!]
  or: [TodoWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  other_id field predicates
  """
  otherID: ID
  otherIDNEQ: ID
  otherIDIn: [ID!]
  otherIDNotIn: [ID!]
  otherIDGT: ID
  otherIDGTE: ID
  otherIDLT: ID
  otherIDLTE: ID
  otherIDIsNil: Boolean
  otherIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
UpdateTodoInput is used for update Todo object.
Input was generated by ent.
"""
input UpdateTodoInput {
  otherID: ID
  clearOtherID: Boolean
  name: String
}
